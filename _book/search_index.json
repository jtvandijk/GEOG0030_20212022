[["transport-network-analysis.html", "10 Transport Network Analysis 10.1 Network Analysis 10.2 Accessibility in Portsmouth 10.3 Assignment 10.4 Before you leave", " 10 Transport Network Analysis This final week we will cover another type of data: network data. We will take a look at different types of network analysis and how they apply to different applications and can be used within spatial analysis. For our practical component, we will look at current some approaches to analyse road networks in R using the dodgr library to calculate the network distance between two points (i.e. an Origin and a Destination). These distances can then be used to calculate the number of X resource (e.g. fast-food outlets) within a certain distance of a POI, e.g. a school or population-weighted centroid. 10.1 Network Analysis The term ‘network analysis’ covers a wide range of analysis techniques, from complex network analysis, social network analysis, link analysis, as well as road network analysis. A network or network graph is constituted by a collection of vertices that are connected to one another by edges. Note, vertices may also be called nodes or points, whilst edges may be called links or lines. Within social network analysis, you may find the terms actors (the vertices) and ties or relations (the edges) also used. Figure 10.1: Visualising networks through vertices and edges. Understanding that networks are formed through the connections of vertices and edges, we can think of many naturally and manmade occurring networks that also have a precise geography to them (i.e. their distribution can be mapped directly within geographic space), including rivers connected with tributaries and animal tracks, to electricity pylons and cables and our road and street networks that form crucial parts of our infrastructure. The latter, in particular, have been a substantial focus of those working within spatial analysis over the last two decades, particularly with routing applications now dominating much of our day-to-day technology, from personal route-planning and ride-share apps to large-scale logistics and infrastructure applications, including the delivery operations behind all of our online shopping and even Scotland’s Trunk Road Gritters. Alongside this development of routing applications, GIS analysts, geographers and public health specialists have also identified the utility of network analysis within geographic space to calculate distance-based measurement and coverage buffers that can be used as part of accessibility studies that look to understand the provision of a specific resource (e.g. greenspaces, hospitals or even fast-food stores) to a certain area of population. 10.1.1 Accessibility to fast-food outlets For this week’s practical, we will be using Portsmouth in the UK as our area of interest for our analysis. Portsmouth is located on the south coast of the UUK, and is actually the only city in the UK whose population density exceeds that of London (in 2011). One of the reasons is that the city primarily occupies an outcrop of land on the south-coast (an island called Portsea Island), and extends only slightly into the north, past the M27. There are lots of geographical issues and challenges within the city that you could investigate, including weaknesses in Portsmouth’s current road provision - there are only three main roads in and out of the island! One prominent topic within the city is the issue of public health and childhood obesity. According to figures released in March 2020 by Public Health England, more than one in three school pupils are overweight or obese by the time they finish primary school within the city - higher than the national average of one in four. One potential contributor to the health crisis is the ease and availability of fast-food in the city. From the local newspaper in the city, the Portsmouth News, Healthwatch Portsmouth Chairman Roger Batterbury was quoted: ‘For people in areas of deprivation, every penny counts and when it comes to buying food, the cheapest option is important but that is rarely the healthy choice.’ See the original article here. The City Council itself has aimed to address the issue by banning new fast-food takeaways within a 400m range of schools – it started with a pilot at Arundel Court Primary Academy in Landport in September 2019. Since the pilot, no new hot food takeaways will be able to open within a 400m radius of the school. To assess the likely impact of this policy, we will investigate the accessibility of fast-food outlets for school children - we want to know if there is a geography to accessibility that could be used within future analysis to understand whether certain socio-economic demographics are more exposed to fast-food then others. We will measure accessibility by understanding how many fast-food outlets are within specific walking distances of each school, starting at 400m, then 800m and finally a 1km walking distance. We will then aggregate these counts at the Lower Super Output Area (LSOA) and compare these results across the city. To get this data ready for our spatial and socio-economic analyses, we will need to first calculate the distances between our schools and fast-food outlets. This involves calculating the shortest distance a child would walk between a school and a fast-food outlet, using roads or streets. This means we need to conduct a road network analysis between each school and fast-food outlet. 10.1.2 Housekeeping Let’s get ourselves ready to start our practical by first adding our relevant libraries, downloading the relevant data and loading this within our script. Open a new script (preferably within your GEOG0030 project) and save this script as wk10-fastfood-analysis.r. At the top of your script, add the following metadata (substitute accordingly): # Analysing distance between schools and fast-food outlets in Portsmouth # Data: January 2022 # Author: Justin For our network analysis, we will be using the dodgr library for calculating Distances On Directed Graphs. Prior to the creation of dodgr, this analysis would have been a little more complex to do. Whilst R has had many network analysis libraries, the majority of these focus on utilising networks in graphical spaces, rather than geographical. Please install the dodgr library prior to continuing. Note All calculations within the dodgr library currently need to be run in WGS84/4236. This is why we do not transform the CRS of our data in this practical. # libraries library(tidyverse) library(sf) library(tmap) library(osmdata) library(dodgr) 10.1.3 Loading data The first data set we need to download will help with the visualisation of our results: boundary data that contains an outline of Portsmouth. File Name File Type Link Major towns and cities boundaries 2015 shp Download Make sure you download the shapefile and store it within an outline folder in your data/raw directory. We then need to load it into our script and filter the full data set to only contain the city of Portsmouth: # load major towns and cities, filter Portsmouth portsmouth_city &lt;- st_read(&quot;data/raw/outline/Major_Towns_and_Cities__December_2015__Boundaries.shp&quot;, stringsAsFactors = FALSE) %&gt;% filter(tcity15nm == &quot;Portsmouth&quot;) ## Reading layer `Major_Towns_and_Cities__December_2015__Boundaries&#39; from data source `/Users/justinvandijk/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0030/data/raw/outline/Major_Towns_and_Cities__December_2015__Boundaries.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 112 features and 5 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -4.204842 ymin: 50.34101 xmax: 1.378014 ymax: 55.03117 ## Geodetic CRS: WGS 84 To create our network and Origin-Destination data sets, we will need to first download data directly from OpenStreetMap using a set of specific queries. Once our data is downloaded, we will then need to extract the data from our query results. We will go ahead and start with downloading and extracting our road network data. First, to download the data, we will again use the osmdata library and the add_osm_feature() function. To use the function, we need to provided it with either a bounding box of our area of interest (AOI) or a set of points, from which the function will create its own bounding box. You can find out more about this and how to construct your queries in the data vignette. To download our road network dataset, we first define a variable to store our bounding box coordinates, p_bbox(). We then use this within our OSM query to extract specific types of road segments within that bounding box - the results of our query are then stored in an osmdata object. We will select all OSM features with the highway tag that are likely to be used by pedestrians (e.g. not motorways). # define our bbox coordinates for Portsmouth p_bbox &lt;- c(-1.113197, 50.775781, -1.026508, 50.859941) # pass bounding box coordinates into the OverPassQuery (opq) function only # download features that are not classified as motorway osmdata &lt;- opq(bbox = p_bbox) %&gt;% add_osm_feature(key = &quot;highway&quot;, value = c(&quot;primary&quot;, &quot;secondary&quot;, &quot;tertiary&quot;, &quot;residential&quot;, &quot;path&quot;, &quot;footway&quot;, &quot;unclassified&quot;, &quot;living_street&quot;, &quot;pedestrian&quot;)) %&gt;% osmdata_sf() You should now see an osmdata variable appear in your environment window. The osmdata object contains the bounding box of your query, a time-stamp of the query, and then the spatial data as osm_points, osm_lines, osm_multilines and osm_polgyons (which are listed with their respective fields also detailed). Some of the spatial features maybe empty, depending on what you asked your query to return. Our next step therefore is to extract our spatial data from our osmdata object to create our road network data set. This is in fact incredibly easy, using the traditional $ R approach to access these spatial features from our object. Deciding what to extract is probably the more complicated aspect of this - mainly as you need to understand how to represent your road network, and this will usually be determined by the library/functions you will be using it within. Today, we want to extract the edges of the network, i.e. the lines that represent the roads, as well as the nodes of the network, i.e. the points that represent the locations at which the roads intersect. For our points, we will just keep the osm_id data field, just in case we need to refer to this later. For our lines, we will keep a little more information that we might want to use either within our road network or analysis, including the type of road, what the maximum speed is on the road, and whether the road is one-way or not. # extract the points, with their osm_id. ports_roads_nodes &lt;- osmdata$osm_points[, &quot;osm_id&quot;] # extract the lines, with their osm_id, name, type of highway, max speed and # oneway attributes ports_roads_edges &lt;- osmdata$osm_lines[, c(&quot;osm_id&quot;, &quot;name&quot;, &quot;highway&quot;, &quot;maxspeed&quot;, &quot;oneway&quot;)] To check our data set, we can quickly plot the edges of our road network using the plot() function: plot(ports_roads_edges) Now we have the network edges, we can turn this into a grap-representation that allows for the calculation of network-based accessibility statistics. 10.2 Accessibility in Portsmouth Before we construct our graph, we need to also create our ORIGIN and DESTINATION points, i.e. the data points we wish to calculate the distances between. As we will use the dodgr_dists() function to calculate these distances, according to the dodgr documentation, these points need to be in either a vector or matrix format, containing the two coordinates for each point for the origins and for the destinations. For our Portsmouth scenario, we are interested in calculating the shortest distances between schools and fast-food outlets, therefore we need to download these data sets - again we will turn to OpenStreetMap. Following a similar structure to our query above, we will use our knowledge of OpenStreetMap keys and values to extract the points of origins (schools) and destinations (fast-food outlets) we are interested in,: # download schools from OSM schools &lt;- opq(bbox = p_bbox) %&gt;% add_osm_feature(key = &quot;amenity&quot;, value = &quot;school&quot;) %&gt;% osmdata_sf() # download fast-food outlets ff_outlets &lt;- opq(bbox = p_bbox) %&gt;% add_osm_feature(key = &quot;amenity&quot;, value = &quot;fast_food&quot;) %&gt;% osmdata_sf() We also need to then follow a similar extraction of our two data sets from the osmdata object as we did for our road data set: # extract school points ports_schools &lt;- schools$osm_points[, c(&quot;osm_id&quot;, &quot;name&quot;)] # extract fast-food outlet points ports_ff &lt;- ff_outlets$osm_points[, c(&quot;osm_id&quot;, &quot;name&quot;)] We now have our road network data and our Origin-Destination points - we are now ready to construct our network graph and run our network analysis. Note In this analysis, we are highly reliant on the use of OpenStreetMap to provide data for both our Origins and Destinations. Whilst in the UK OSM provides substantial coverage, its quality is not always guaranteed. As a result, to improve on our current methodology in future analysis, we should investigate into a more official school data set or at least validate the number of schools against City Council records. The same applies to our fast-food outlets. With any network analysis, the main data structure is a graph, constructed by our nodes and edges. To create a graph for use within dodgr, we pass our ports_roads_edges() into the weight_streetnet() function. The dodgr library also contains weighting profiles, that you can customise, for use within your network analysis. These weighting profiles contain weights based on the type of road, determined by the type of transportation the profile aims to model. Here we will use the weighting profile foot, as we are looking to model walking accessibility. # create network graph using are edge data, with the foot weighting profile graph &lt;- weight_streetnet(ports_roads_edges, wt_profile = &quot;foot&quot;) Once we have our graph, we can then use this to calculate our network distances between our OD points. One thing to keep in mind is that potentially not all individual components in the network that we exracted are connected, for instance, because the bounding box cut-off the access road of a cul-de-sac. To make sure that our entire extracted network is connected, we now extract the largest connected component of the graph. Note The dodgr package documentation explains that components are numbered in order of decreasing size, with $component = 1 always denoting the largest component. # extract the largest connected graph component graph_connected &lt;- graph[graph$component == 1, ] # inspect number of remaining road segments nrow(graph_connected) ## [1] 50614 # inspect on a plot plot(dodgr_to_sf(graph_connected)) ## Warning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot ## all Here we will use the dodgr_distances function, which you can find out more about in the its documentation. In this function, we first pass our graph, then our Origin points (schools), in the from argument, and then our Destination points (fast-food outlets), in the to argument. There are several other arguments the function takes, which, again, you can read about in the documentation. One thing to note is our addition of the st_coordinates function as we pass our two point datasets within the from and to functions. In their current format, our point data is as an sf data frame, which the function cannot pass - we need to instead provide it with a vector or matrix. We can achieve this simply by using the st_coordinates function, which retrieves the coordinates of any (spatial) data frame in matrix form. 10.3 Assignment 10.4 Before you leave "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
