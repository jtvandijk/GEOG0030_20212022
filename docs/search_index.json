[["index.html", "GEOG0030: Geocomputation Module Introduction Welcome Moodle Module overview Troubleshooting Acknowledgements", " GEOG0030: Geocomputation Justin van Dijk 2021-11-18 Module Introduction Welcome Welcome to Geocomputation, a course that introduces you to both the principles of spatial analysis and the use of programming for data analysis. Over the next ten weeks, you will learn about the theory, methods and tools of spatial analysis whilst implementing small research projects, first using QGIS, and then using the R programming language within the RStudio software environment. You will learn how to find, manage and clean spatial, demographic and socio-economic data sets, and then analyse them using core spatial and statistical analysis techniques. Moodle Moodle is the central point of your learning experience for GEOG0030 and contains everything you need to know about it. It is where you will find links to all lecture content, reading materials, planned activities as well as key module and assessment information Module overview The topics covered over the next ten weeks are: Week Section Topic 1 Foundational Concepts Geocomputation: An Introduction 2 Foundational Concepts GIScience and GIS software 3 Foundational Concepts Cartography and Visualisation 4 Foundational Concepts Programming for Data Analysis 5 Foundational Concepts Programming for Spatial Analysis Reading week Reading week 6 Core Spatial Analysis Analysing Spatial Patterns I: Geometric Operations 7 Core Spatial Analysis Analysing Spatial Patterns II: Spatial Autocorrelation 8 Core Spatial Analysis Analysing Spatial Patterns III: Point Pattern Analysis 9 Advanced Spatial Analysis Rasters, Zonal Statistics and Interpolation 10 Advanced Spatial Analysis Geodemographics Troubleshooting Spatial analysis can yield fascinating insights into geographical relationships. However, at times it can be difficult to work with - particularly when we combine this with learning how to program at the same time. You will get lots of error messages and have software crash, you will end up with bugs in your code that are difficult to find, and you may spend a whole day trying to track down a single data set. But the rewards of learning how to do all of this will become apparent. If you need specific assistance with this course please: Attend the weekly Geocomputation help sessions to ask questions directly to the PGTA. Post in the respective r-help channels within the Geocomputation Team. Ask a question at the end of a lecture or during the computer practical. Check the Moodle assessment tab for queries relating to the assessment (more information will be provided at the end or reading week) Attend the Department’s Coding Therapy sessions that are run on a weekly basis If after pursuing all these avenues you still need help, you can book into our office hours. These meetings are to discuss a geographical concept in relation to the material/assessment or for any personal matters relevant to the completion of the module. Acknowledgements This workbook is adapted from GEOG0030: Geocomputation 2021-2021, as created by Dr Jo Wilkin. "],["geocomputation-an-introduction.html", "1 Geocomputation: An Introduction 1.1 Lecture recording 1.2 Reading list 1.3 Getting started 1.4 Software 1.5 File management 1.6 Before you leave", " 1 Geocomputation: An Introduction This week’s lecture provided you with a thorough introduction into what is Geocomputation, outlining how and why it is different to a traditional ‘GIScience’ course. We set the scene for the remainder of the module and explained how the foundational concepts that you will learn about in the first half of term fit together to form the overall Geocomputation curriculum. For this week only, there is no practical but you will need to complete a few practical tasks in preparation for our future practicals. 1.1 Lecture recording Lecture W1 1.2 Reading list Reading #1 Reading #2 1.3 Getting started Over the next few weeks, we will be taking a closer look at many of the foundational concepts that will ultimately enable you to confidently and competently analyse spatial data using both programming and GIS software. As you might guess, you will therefore be going on many learning curves over the coming weeks - some that may feel familiar (e.g. applying descriptive statistics) and others that are more challenging (e.g. learning how to write code and debug it as you find errors). To help with this, we highly recommend that you try to stay organised with your work, including taking notes and making yourself a coding handbook. We would also suggest to list the different data sets you come across - and importantly, the scales and different projections you use them at - more on this over the next weeks. Finally, you should also make notes about the different spatial analysis techniques you come across, including the different properties they assess and parameters they require to run. Furthermore, over the next nine weeks, you will learn how to plan, structure and conduct your own spatial analysis using programming – whilst making decisions on how to best present your work, which is a crucial aspect of any type of investigation but of particular relevance to your dissertation. 1.4 Software This course primarily uses the R programming language. We briefly touch upon QGIS in the first few weeks to give you a basic foundation in spatial analysis alongside the range of spatial software available. Note Please follow the instructions below to install both R and QGIS onto your own personal computer. Please make sure everything works before the first hands-on practical session next week. 1.4.1 QGIS Installation QGIS is an open-source graphic user interface GIS with many community developed add-on packages (or plugins) that provide additional functionality to the software. You can download and install QGIS on your personal machine by going to the QGIS website: [Link]. Note We recommend installing the Long Term Release as this version should be the most stable, recent version. After installation, start QGIS to see if the installation was successful and no errors are shown after start up. 1.4.2 R and RStudio Installation R is both a programming language and software environment - in the form of RStudio- originally designed for statistical computing and graphics. R’s great strength is that it is open-source, can be used on any computer operating system, and is free for anyone to use and contribute to. Because of this, it is rapidly becoming the statistical language of choice for many academics and has a huge user community with people constantly contributing new packages to carry out all manner of statistical, graphical, and importantly for us, geographical tasks. Installing R takes a few relatively simple steps involving two programmes. First there is the R programme itself. Follow these steps to get it installed on your computer: Navigate in your browser to your nearest CRAN mirror: [Link] If you use a Windows computer, click on Download R for Windows. Then click on base. Download and install R 4.1.1 for Windows. If you use a Mac computer, click on Download R for macOS and download and install R-4.1.1.pkg That is it! You now have installed the latest version of R on your own machine. However, to make working with R a little bit easier we also need to install something called an Integrated Development Environment (IDE). We will use RStudio: Navigate to the official webpage of RStudio: [Link] Download and install RStudio Desktop on your computer (free version!) After this, start RStudio to see if the installation was successful. 1.4.3 UCL Desktop and RStudio Server As an alternative to installing QGIS and R with RStudio on your personal device, there are some other options. Firstly, both programmes are available through Desktop@UCL Anywhere as well as all UCL computers on campus. In case of R, there is also an RStudio server version available which you can accesst through your web browser: [Link] You should be able to log in with your normal UCL username and password. After logging in, you should see the RStudio interface appear. Figure 1.1: The RStudio Server interface. Note If it is the first time you log on to RStudio server you may only see the RStudio interface appear once you have clicked on the start a new session button. More importantly: if you are not on campus, RStudio server will only work with an active Virtual Private Network (VPN) connection that links your personal computer into UCL’s network. Details on setting up a VPN connection can be found in UCL’s VPN connection guides: [Link] 1.4.4 A note on ArcGIS ArcGIS Pro (previously ArcMap) is the main commercial GIS software that you may have already used - or seen/heard about through other modules or even job adverts. We do not use ArcGIS Pro in our Practicals for several reasons: Computing requirements for ArcGIS Pro are substantial and it only operates on the Windows Operating System. For Mac users, using ArcGIS Pro (and ArcMap) would require using either a Virtual Machine or running a copy of Windows OS on a separate partition of your hard drive. It is proprietary software, which means you need a license to use the software. For those of us in education, the University covers the cost of this license, but when you leave, you will need to pay for a personal license (around £100 for non-commercial use) to continue using the software and repeat any analysis you have used the software for. Whilst ArcPro can use pure Python (and even R) as a programming language within it through scripts and notebooks, it primarily relies on its own ArcPy and ArcGIS API for Python packages to run the in-built tools and analytical functions. To use these packages, you still need a license which makes it difficult to share your code with others if they do not have their own ArcGIS license. Recent developments in the ArcPro software, however, does make it an attractive tool for spatial data science and quantitative geography - it has cross-user functionality, from data analysts who like to use a tool called Notebooks for their code development, to those focused more on cartography and visualisation with in-built bridges to Adobe’s Creative Suite. We therefore do not want to put you off looking into ArcGIS in the future, but for this course, we want to ensure the reproducibility of your work. Note This also means that the analysis you will be doing for your coursework assignment must be completed in R and QGIS. Specific guidance on the coursework assignment and permitted software will be made available at the end of Reading Week. 1.5 File management Establishing an organised file system, for both your data and your documents, is essential to working effectively and efficiently as a researcher, whether in Geocomputation, Spatial Data Science or any other application you might think of! To get ready for our practicals, which start next week, we would like you to set-up a file management system as follows (either on your local computer, Desktop@UCL Anywhere or RStudio server). Create a GEOG0030 folder in your Documents folder on your computer (most likely inside a UCL or Undergraduate or Geography folder). Next, within your GEOG0030 folder, create the following subfolders: Folder name Purpose data To store both raw data sets and final outputs. slides To store a copy of the lecture slides. maps To save the maps you produce during your practicals. qgis To save any data related to QGIS. notes To store your notes, codebook, etc. Within your data folder, create the following subfolders: Folder name Purpose raw To store all your raw data files that have not yet been processed. working To store all your intermediate data files that have had some processing, but are not yet a final product. final To store all your final data files that have been processed and analysed, potentially ready to be mapped. If you have have downloaded the lecture slides, move these into your slides folder. 1.6 Before you leave You should now be all ready to go with the computer practicals the coming week. That is it for this week! "],["giscience-and-gis-software.html", "2 GIScience and GIS software 2.1 Lecture recording 2.2 Reading list 2.3 Simple digitisation of spatial features 2.4 Population change in London 2.5 Assignment 2.6 Before you leave", " 2 GIScience and GIS software This week’s lecture introduced you to foundational concepts associated with GIScience and GIS software on spatial representations and sample design. Out of all our foundational concepts you will come across in the next four weeks, this is probably the most substantial to get to grips with and has both significant theoretical and practical aspects to its learning. The practical component of the week puts some of these learnings into practice with a digitisation of the river Thames in London as well as an exploration of population data within London using QGIS. 2.1 Lecture recording Lecture W2 2.2 Reading list Reading #1 Reading #2 2.3 Simple digitisation of spatial features To get spatial features in a digital form, they need to be digitised. Let’s take what should be a straight-forward example of digitising the River Thames in London. Figure 2.1: The Thames. We are going to use a very light online tool that allows us to create digital data and export the data we create as raw files. Head to geojson.io - it should load directly, zoomed into London. In the bottom left-hand corner, select Satellite as your map option. Next, click on the Draw a Polyline tool. Now digitise the river Thames - simply click from a starting point on the left- or right-hand side of the map, and digitise the whole river. Once you are done, simply double-click your final point to end your line. You can then click on the line and select info to find out how long the line is. Questions How easy did you find it to digitise the data and what decisions did you make in your own ‘sample scheme’? How close together are your clicks between lines? Did you sacrifice detail over expediency or did you spend perhaps a little too long trying to capture ever small bend in the river? How well do you think your line represents the River Thames? 2.4 Population change in London The second part of this practical will introduces you to attribute joins and making a simple choropleth map. You will be using these joins throughout this module, so it is incredibly important that you understand how they work – even as simple as they may be! Note The data sets you will create in this practical will be used in next week’s practical, so make sure to follow every step and export your data into your working folder at the end. When using spatial data, there is generally a very specific workflow that you will need to go through - and believe it or not, the majority of this is not actually focused on analysing your data. Along with the idea that 80% of data is geographic data, the second most often-quoted GIS-related unreferenced ‘fact’ is that anyone working with spatial data will spend 80% of their time simply finding, retrieving, managing and processing the data – before any analysis can be done. One of the reasons behind this need for a substantial amount of processing is that the data you often need to use is not in the format that you require for analysis. For example, for our investigation, there is not a ‘ready-made’ spatial population data set (i.e. population shapefile) we can download to explore population change across England: Figure 2.2: Alas a quick Google search shows that finding a shapefile of England’s population is incredibly difficult. Instead, we need to go and find the raw data sets and create the data layers that we want. As a result, before beginning any spatial analysis project, it is best-practice to think through what end product you will ultimately need for your analysis. A typical spatial analysis workflow usually looks something like this: Identify the data you need to complete your analysis i.e. answer your research questions. This includes thinking through the scale, coverage and currency of your data set. Find the data that matches your requirements, e.g. - is it openly and easily available? Download the data and store it in the correct location. Clean/tidy the data - this may be done before or after ingesting your data into your chosen software/programme. Ingest/load the data into your chosen software/programme. Transform &amp; process the data - this may require re-projection, creating joins between data sets, calculating new fields and/or creating selections of the data that you want to work with. Run Analysis on your data, whatever technique you are using. Visualise your data and results, including maps, graphs and statistics. Communicate your study and outputs - through good write-ups and explanations of your visualisations. As you can see, the analysis and visualisation part comes quite late in the overall spatial analysis workflow - and instead, the workflow is very top-heavy with data management. Often in GIS-related courses, you will often be given pre-processed data sets ready to go ahead with analysing the data. Instead, we are going to start cleaning (the majority of) our data from the get-go. This will help you understand the processes that you will need to go through in the future as you search for and download your own data, as well as deal with the data first-hand before ingesting it within our GIS software. Good thing you will be learning a lot about these aspects over the coming weeks! 2.4.1 Setting the scene For this practical, we will investigate how population has changed over the last ten years in London. Understanding population change - over space - is spatial analysis at its most fundamental. We can understand a lot just from where population is growing or decreasing, including thinking through the impacts of these changes on the provision of housing, education, health and transport infrastructure. We can also see first-hand the impact of wider socio-economic processes, such as urbanisation, or, in the case of the predicted population movements currently, relocation of a certain demographic of urban dwellers to rural areas. For us, the aim for our practical is to actually create population data for London in 2011, 2015 and 2019 at the ward scale that we can use within our future analysis projects, starting next week. This data will be used in our future practicals to normalise certain data, such as the crime data sets for next week. Note Why do we need to normalise by population? When we record events created by humans, there is often a population bias: simply, more people in an area will by probability lead to a higher occurrence of said event, such as crime. We will look at this in greater detail next week. 2.4.2 Finding our data sets In the UK, finding authoritative data on population and Administrative Geography boundaries is increasingly straight-forward. Over the last ten years, the UK government has opened up many of its data sets as part of an Open Data precedent that began in 2010 with the creation of data.gov.uk and the Open Government Licence (the terms and conditions for using data). Data.gov.uk is the UK government’s central database that contains open data that the central government, local authorities and public bodies publish. This includes, for example, aggregated census and health data – and even government spending. In addition to this central database, there are other authoritative databases run by the government and/or respective public bodies that contain either a specific type of data (e.g. census data, crime data) or a specific collection of data sets (e.g. health data direct from the NHS, data about London). Some portals are less up-to-date than others, so it is wise to double-check with the ‘originators’ of the data to see if there are more recent versions. For our practical, we will access data from two portals: For our administrative boundaries, we will download the spatial data from the London Datastore (which is exactly what it sounds like!). For population, we will download attribute data from the Office of National Statistics (ONS) for 2019 and the London Datastore (currently only contains these data until 2018). 2.4.3 Downloading and processing The first step in our practical is to download and process our two main data sets: administrative geography boundaries and population data. 2.4.3.1 Administrative Geography Boundaries For our administrative boundaries, we will download the Statistical GIS Boundary Files for London data set(s) found in the London Datastore. Navigate to the data sets: [Link] When you navigate to this page, you will find multiple choices of data to download. We will need to download all three zipfiles: statistical-gis-boundaries-london.zip, London-wards-2014.zip and London-wards-2018.zip. The first data set contains ALL levels of London’s administrative boundaries. In descending size order: Borough, Ward, Middle layer Super Output Area (MSOA), Lower layer Super Output Area (LSOA), and Output Area (OA) from 2011. The second data set contains an UPDATED version of the Ward boundaries, as of 2014. The third data set contains an UPDATED version of the Ward boundaries, as of 2018. Once downloaded, you will need to unzip the file. Note To unzip the file, you can use the built-in functionality of your computer’s operating system. For Windows: right click on the zip file, select Extract All, and then follow the instructions. For Mac OS: double-click the zip file. As we will be looking at population data for 2015 and 2019, it is best practice to use those boundaries that are most reflective of the ‘geography’ at the time; therefore, we will use these 2014 / 2018 ward boundaries for our 2015 / 2019 population data set, respectively. Once unzipped, you will find two folder options: Esri and MapInfo. These folders contain the same set of data, but simply in two data formats: Esri shapefile and MapInfo TAB. Note MapInfo is another proprietary GIS software, which has historically been used in public sectors services in the UK and abroad (and many councils still use the software!), although has generally been replaced by either Esri’s ecosystem or open-source software GIS. The TAB format is the main format that the software uses for vector data, similar to Esri and its shapefile format. In your GEOG0030/data/raw/ folder, create a new folder called boundaries. Within this folder, create three new folders: 2011, 2014 and 2018. Copy the entire contents of Esri folder of each year into their respective year folder within your new boundaries folder. We do not want to add the additional Esri folder as a step in our filesystem, i.e. your file path should read: GEOG0030/data/raw/boundaries/2011 for the 2011 boundaries and GEOG0030/data/raw/boundaries/2014 for the 2014 boundaries etc. Figure 2.3: Your setup should look like this. We now have our Administrative Geography files ready for use. We will ingest these directly into QGIS and do not need to do any cleaning at this stage. Note Administrative geographies are a way of dividing the country into smaller sub-divisions or areas that correspond with the area of responsibility of local authorities and government bodies. These administrative sub-divisions and their associated geography have several important uses, including assigning electoral constituencies, defining jurisdiction of courts, planning public healthcare provision, as well as what we are concerned with: used as a mechanism for collecting census data and assigning the resulting data sets to a specific administrative unit. Administrative areas ensure that each public body has a clearly defined area of responsibility, which can be measured and budgeted for appropriately. They originate from the Roman era who used these geographies, usually defined by topographical and geographical features, to administer these regions including collecting the relevant tax from those living in these areas. These geographies are updated as populations evolve and as a result, the boundaries of the administrative geographies are subject to either periodic or occasional change. For any country in which you are using administrative geographies, it is good practice therefore to research into their history and how they have changed over the period of your data set. In the modern spatial analysis, we use administrative geographies to aggregate individual level data and individual event data. One of the motivations for this is the fact that census data (and many other sources of socio-economic and public health data) are provided at specific administrative levels, whilst other data sets can often be easily geo-referenced or aggregated to these levels. Furthermore, administrative geographies are concerned with the hierarchy of areas – hence we are able to conduct analyses at a variety of scales to understand local and global trends. The UK has quite a complex administrative geography, particularly due to having several countries within one overriding administration and then multiple ways of dividing the countries according to specific applications. For the majority of your practicals, we will be keeping it simple with a focus on London, which is divided into: Boroughs -&gt; Wards OR Boroughs -&gt; Middle layer Super Output Areas -&gt; Lower layer Super Output Areas -&gt; Output Areas. We will be looking at wards in our practical analysis – although even at this fine scale, the City of London is a little pesky and introduces complexities into our analysis, which we willl see. 2.4.3.2 Population data For our population data sets, we will use the ONS mid-year estimates (MYE). These population data sets are estimates that have been modelled based on the previous 2011 census count and then forecasted population growth (in combination with several additional data sources). They are released once a year, with a delay of a year. Today we will use the data for 2011, 2015, and 2019. Navigate to the Ward level data sets: [Link] When you navigate to this page, you will find multiple choices of data to download. We will need to download the estimates for 2011, 2015 and 2019. Click to download each of the zipfiles. Choose the revised versions for 2015 and the (Census-based) 2011 wards edition for 2011. In your GEOG0030/data/raw/ folder, create a new folder called population, unzip your download, and copy the three spreadsheets into this folder. Now it is time to do some quite extensive data cleaning. 2.4.3.3 Cleaning our population data sets If you open up the 2011 ward spreadsheet in Excel (or another spreadsheet programme: this could be Numbers or you can upload your data to use it with Google Docs, for example), you will quickly see that there are several worksheets to this workbook. We are interested in the Mid-2011 Persons. Click on the Mid-2011 Persons tab and have a look at the data. As you should be able to see, we have a set of different fields (e.g. Ward Code, Ward Name), including population statistics. Right now, we have too much data - so what we will want to do is simplify and extract only the data we need for analysis. For this, we need the total population (All Ages), alongside some identifying information that distinguishes each record from one another. Here we can see that both Ward Code and Ward Name suit this requirement. We can also think that the Local Authority column might be of use - so it might be worthwhile keeping this information as well. Create a new spreadsheet within your programme. From the Mid-2011 Persons spreadsheet, copy over all cells from columns A to D and rows 4 to 636 into this new spreadsheet. Row 636 denotes the end of the Greater London wards (i.e. the end of the Westminster LA) which are kept (in most scenarios) at the top of the spreadsheet as their Ward Codes are the first in sequential order. Before we go any further, we need to format our data. First, we want to rename our fields to remove the spaces and superscript formatting. Re-title the fields as follows: ward_code, ward_name, local_authority and pop2011. One further bit of formatting that you MUST do before saving your data is to format our population field. At the moment, you will see that there are commas separating the thousands within our values. If we leave this commas in our values, QGIS will read them as decimal points, creating decimal values of our population. There are many points at which we could solve this issue, but the easiest point is now - we will strip our population values of the commas and set them to integer (whole numbers) values. To format this column, select the entire column and right-click on the D cell. Click on Format Cells and set the Cells to Number with 0 decimal places. You should see that the commas are now removed from your population values. Save your spreadsheet into your working folder as ward_population_2011.csv. We now need to copy over the data from the 2015 and 2019 data sets into their own csv's as well. Open the Mid-2015 ward population .xls from your population folder. As you will see again, there are plenty of worksheets available - again, we want to select the Mid-2015 Persons tab. We now need to copy over the data from our 2015 data set to a new spreadsheet again. However, at first instance, you will notice that the City of London (CoL) wards are missing from this data set. Then if you scroll to the end of the London Local Authorities, i.e. to the bottom of Westminster, what you should notice is that the final row for the Westminster data is in fact row 575 - this means we are missing nearly other LAs in addition to our CoL LAs and we will need to determine which ones are missing and if we can find them in the 2015 spreadsheet. With this in mind, first copy from row 5 to the end of the grouped London Local Authorities, i.e. to the bottom of Westminster, for columns A to D into a new spreadsheet. Through a quick scroll through the Local Authorities, a.k.a boroughs, (and with the extensive knowledge that you will soon build about London Local Authorities!) we can quickly find that we are missing the wards for: Hackney Kensington and Chelsea Tower Hamlets If we head back to the original 2015 raw data set, we can actually find this data (as well as the City of London) further down in the spreadsheet. It seems like these LAs had their codes revised in the 2014 revision and are no longer in the same order as the 2011 data set - oh, the joys of using data! Locate the data for the City of London, Hackney, Kensington and Chelsea and Tower Hamlets and copy this over into our new spreadsheet. Double-check that you now have in total 637 wards within your data set. Remember to rename the fields as above, but change your population field to pop2015. Also, remember to reformat your population values. Once complete, save your spreadsheet into your working folder as ward_population_2015.csv. We now need to repeat this for our 2019 data. Open the Mid-2019 ward population spreadsheet from your population folder. As you will see again, there are plenty of worksheets available - again, we want to select the Mid-2019 Persons tab. Let us have a look at our data - once again, there’s a lot to take in - but what we’re interested is in columns A, B, and now D and G. Let us follow the same process we used above to copy our data across. To make our processing easier, first hide columns C, E and F in our spreadsheet - in Excel: right-click on the columns and select Hide. Next, copy the data from row 5 to the final row for the Westminster data for columns A, B, D and G over into a new spreadsheet. Look at the total number of rows you have copied over. We can see that we have even fewer wards than the 2015 data set - yikes!We need to go hunting again for our missing data in the 2019 data set. For expediency, you need to find and copy over the data for: City of London Hackney Kensington and Chelsea Tower Hamlets (as per 2015) and Bexley Croydon Redbridge Southwark Perhaps now you see why so much time is spent on processing data for spatial analysis! Copy over the remaining wards for these Local Authorities/boroughs. Once you’ve copied them over - you should now have 640 wards - delete columns C, E and F and rename the remaining fields as you have done previously. Also, remember to reformat your population values. Once complete, save your spreadsheet into your working folder as ward_population_2019.csv. You should now have your three population csv data sets in your working folder. We are now (finally) ready to start using our data within QGIS. 2.4.4 Using QGIS to map our population data 2.4.4.1 Setting up the project We will now use QGIS to create population maps for the wards in London across our three time periods. To achieve this, we need to join our table data to our spatial data sets and then map our populations for our visual analysis. Because, as we have seen above, we have issues with the number of wards and changes in boundaries across our three years, we will not (for now) complete any quantitative analysis of these population changes - this would require significant additional processing that we do not have time for today. Note Data interoperability is a key issue that you will face in spatial analysis, particularly when it comes to Administrative Geographies. Start QGIS. Let’s start a new project. Click on Project -&gt; New. Save your project into your qgis folder as w2-pop-analysis. Remember to save your work throughout the practical. Before we get started with adding data, we will first set the Coordinate Reference System of our Project. Click on Project -&gt; Properties – CRS. In the Filter box, type British National Grid. Select OSGB 1936 / British National Grid - EPSG:27700 and click Apply. Click OK. Note We will explain CRSs and using CRSs in GIS software in more detail next week. 2.4.4.2 Adding layers We will first focus on loading and joining the 2011 data sets. Click on Layer -&gt; Add Layer -&gt; Add Vector Layer. With File select as your source type, click on the small three dots button and navigate to your 2011 boundary files. Here, we will select the London_Ward.shp data set. Click on the .shp file of this data set and click Open. Then click Add. You may need to close the box after adding the layer. We can take a moment just to look at our Ward data - and recognise the shape of London. Can you see the City of London in the data set? It has the smallest wards in the entire London area. With the data set loaded, we can now explore it in a little more detail. We want to check out two things about our data: first, its Properties and secondly, its Attribute Table. Right-click on the London_Ward layer and open the Attribute Table and look at how the attributes are stored and presented in the table. Explore the different buttons in the Attribute Table and see if you can figure out what they mean. Once done, close the Attribute Table. Right-click on the London_Ward layer and select Properties. Click through the different tabs and see what they contain. Keep the Properties box open. Before adding our population data, we can make a quick map of the wards in London - we can add labels and change the symbolisation of our wards. In the Properties box, click on the Symbology tab - this is where we can change how our data layer looks. For example, here we can change the line and fill colour of our Wards utilising either the default options available or clicking on Simple Fill and changing these properties directly. Keep the overall styling to a Single Symbol for now - we will get back to this once we have added the population data. You can also click on the Labels tab - and set the Labels option to Single labels. QGIS will default to the NAME column within our data. You can change the properties of these labels using the options available. Change the font to Futura and size 8 and under the add a small buffer to the labels by selecting Draw text bufer under the Buffer tab. You can click Apply to see what your labels look like. Please note that the background colour may differ. Figure 2.4: It looks incredibly busy. Click OK once you are done changing the Symbology and Label style of your data to return to the main window. Note The main strength of a GUI GIS system is that is really helps us understand how we can visualise spatial data. Even with just these two shapefiles loaded, we can understand two key concepts of using spatial data within GIS. The first, and this is only really relevant to GUI GIS systems, is that each layer can either be turned on or off, to make it visible or not (try clicking the tick box to the left of each layer). This is probably a feature you are used to working with if you have played with interactive web mapping applications before! The second concept is the order in which your layers are drawn – and this is relevant for both GUI GIS and when using plotting libraries such as ggplot2 in RStudio. Your layers will be drawn depending on the order in which your layers are either tabled (as in a GUI GIS) or ‘called’ in your function in code. Being aware of this need for ‘order’ is important when we shift to using RStudio and ggoplot2 to plot our maps, as if you do not layer your data correctly in your code, your map will end up not looking as you hoped! For us using QGIS right now, the layers will be drawn from bottom to top. At the moment, we only have one layer loaded, so we do not need to worry about our order right now - but as we add in our 2015 and 2018 ward files, it is useful to know about this order as we will need to display them individually to export them at the end. 2.4.4.3 Conducting an attribute join We are now going to join our 2011 population data to our 2011 shapefile. First, we need to add the 2011 population data to our project. Click on Layer -&gt; Add Layer -&gt; Add Delimited Text Layer. Click on the three dots button again and navigate to your 2011 population data in your working folder. Your file format should be set to csv. You should have the following boxes clicked under the Record and Field options menu: Decimal separator is comma; First record has field names; Detect field types; Discard empty fields. QGIS does many of these by default, but do double-check! Set the Geometry to No geometry (attribute only table) under the Geometry Definition menu. Then click Add and Close. You should now see a table added to your Layers box. We can now join this table data to our spatial data using an Attribute Join. Note An attribute join is one of two types of data joins you will use in spatial analysis (the other is a spatial join, which we will look at later on in the module). An attribute join essentially allows you to join two data sets together, as long as they share a common attribute to facilitate the ‘matching’ of rows: Essentially you need a single identifying ID field for your records within both data sets: this can be a code, a name or any other string of information. In spatial analysis, we always join our table data to our shape data (One way to think about it as attaching the table data to each shape). As a result, your target layer is always the shapefile (or spatial data) whereas your join layer is the table data. These are known as the left- and right-side tables when working with code. To make a join work, you need to make sure your ID field is correct across both data sets, i.e. no typos or spelling mistakes. Computers can only follow instructions, so they do not know that St. Thomas in one data set is that same as St Thomas in another, or even Saint Thomas! It will be looking for an exact match! As a result, whilst in our data sets we have kept both the name and code for both the boundary data and the population data, when creating the join, we will always prefer to use the CODE over their names. Unlike names, codes reduce the likelihood of error and mismatch because they do not rely on understanding spelling! Common errors, such as adding in spaces or using 0 instead O (and vice versa) can still happen – but it is less likely. To make our join work, we need to check that we have a matching UID across both our data sets. We therefore need to look at the tables of both data sets and check what attributes we have that could be used for this possible match. Open up the Attribute Tables of each layer and check what fields we have that could be used for the join. We can see that both our respective “code” fields have the same codes (ward_code and GSS_code) so we can use these to create our joins. Right-click on your London_Ward layer -&gt; Properties and then click on the Joins tab. Click on the + button. Make sure the Join Layer is set to ward_population_2011. Set the Join field to ward_code. Set the Target field to GSS_code. Click the Joined Fields box and click to only select the POP2011 field. Click on the Custom Field Name Prefix and remove the pre-entered text to leave it blank. Click on OK. Click on Apply in the main Join tab and then click OK to return to the main QGIS window. We can now check to see if our join has worked by opening up our London_Ward Attribute Table and looking to see if our wards now have a Population field attached to it. Right-click on the London_Ward layer and open the Attribute Table and check that the population data column has been added to the table. As long as it has joined, you can move forward with the next steps. If your join has not worked, try the steps again - and if you are still struggling, do let us know. Note Now, the join that you have created between your ward and population data sets in only held in QGIS’s memory. If you were to close the programme now, you would lose this join and have to repeat it the next time you opened QGIS. To prevent this from happening, we need to export our data set to a new shapefile - and then re-add this to the map. Let’s do this now: Right-click on your London_Ward shapefile and click Export -&gt; Save Features As…. The format should be set to an ESRI shapefile. Then click on the three dots buttons and navigate to your final folder and enter: ward_population_2011 as your file name. Check that the CRS is British National Grid. Leave the remaining fields as selected, but check that the Add saved file to map is checked. Click OK. You should now see our new shapefile add itself to our map. You can now remove the original London_Ward and ward_population_2011 data sets from our Layers box (Right-click on the layers and opt for Remove Layer…). The final thing we would like to do with this data set is to style our data set by our newly added population field to show population distribution around London. To do this, again right-click on the Layer -&gt; Properties -&gt; Symbology. This time, we want to style our data using a Graduated symbology. Change this option in the tab and then choose pop2011 as your column. We can then change the color ramp to suit our aesthetic preferences - Viridis seems to be the cool colour scheme at the moment, and we will choose to invert our ramp as well. The final thing we need to do is classify our data - what this simply means is to decide how to group the values in our data set together to create the graduated representation. We will be looking at this in later weeks, but for now, we will use the Natural Breaks option. Click on the drop-down next to Mode, select Natural Breaks, change it to 7 classes and then click Classify. Finally click Apply to style your data set. Note Understanding what classification is appropriate to visualise your data is an important step within spatial analysis and visualisation, and something you will learn more about in the following weeks. Overall, they should be determined by understanding your data’s distribution and match your visualisation accordingly. Feel free to explore using the different options with your data set at the moment – the results are almost instantaneous using QGIS, which makes it a good playground to see how certain parameters or settings can change your output. You should now be looking at something like this: Figure 2.5: Your result. You will be able to see that we have some missing data - and this is for several wards within the City of London. This is because census data is only recorded for 8 out of the 25 wards and therefore we have no data for the remaining wards. As a result, these wards are left blank, i.e. white, to represent a NODATA value. One thing to flag is that NODATA means no data - whereas 0, particularly in a scenario like this, would be an actual numeric value. It is important to remember this when processing and visualising data, to make sure you do not represent a NODATA value incorrectly. 2.4.5 Exporting map for visual analysis To export your map (as is): - Select only the map layers you want to export and then opt for Project -&gt; Import/Export -&gt; Export to Image and save your final map in your maps folder. You may want to create a folder for these maps titled w02. Next week, we will look at how to style our maps using the main map conventions (adding North Arrows, Scale Bars and Legends) but for now a simple picture will do. 2.5 Assignment You now need to repeat this whole process for your 2015 and 2019 data sets. Remember, you need to: Load the respective Ward data set as a Vector Layer. Load the respective Population data set as a Delimited Text File Layer (remember the settings!). Join the two data sets together using the Join tool in the Ward data set Properties box. Export your joined data set into a new data set within your final folder. Style your data appropriately. Export your maps as an image to your maps folder. To make visual comparisons against our three data sets, theoretically we would need to standardise the breaks at which our classification schemes are set at. To set all three data sets to the same breaks, you can do the following: Right-click on the ward_population_2019 data set and navigate to the Symbology tab. Double-click on the Values for the smallest classification group and set the Lower value to 141 (this is the lowest figure across our data sets, found in the 2015 data). Click OK, then Click Apply, then Click OK to return to the main QGIS screen. Right-click again on the ward_population_2019 data set but this time, click on Styles -&gt; Copy Styles -&gt; Symbology. Now right-click on the ward_population_2015 file, but this time after clicking on Styles -&gt; Paste Style -&gt; Symbology. You should now see the classification breaks in the 2015 data set change to match those in the 2019 data. Repeat this for the 2011 data set as well. The final thing you need to do is to now change the classification column in the Symbology tab for the 2015 and 2011 data sets back to their original columns and press Apply. You will see when you first load up their Symbology options this is set to pop2019, which of course does not exist within this data set. 2.6 Before you leave Finally, that is it for this week! Remember to save your project! "],["cartography-and-visualisation.html", "3 Cartography and Visualisation 3.1 Lecture recording 3.2 Reading list 3.3 Crime in London 3.4 Assignment 3.5 Before you leave", " 3 Cartography and Visualisation This week’s lecture has given you an in-depth introduction into how we can create a successful map, including understanding map projections, cartographic conventions and issues faced with the analysis of aggregated data at areal units. The practical component of the week puts some of these learnings into practice as we analyse crime rates within London at two different scales. Note The data sets you will create in this practical will be used in other practicals, so make sure to follow every step and export your data into your working and final folders (respectively) at the end. The practical will also introduce you to point-in-polygon counts. You will be using these counts throughout this module, so it is incredibly important that you understand how they work – even as simple as they may be! 3.1 Lecture recording Lecture W3 3.2 Reading list Reading #1 Reading #2 3.3 Crime in London Over the next few weeks, we will look to model driving factors behind crime across London from both a statistical and spatial perspective. As Reid et al. (2018) explain: Spatial analysis can be employed in both an exploratory and well as a more confirmatory manner with the primary purpose of identifying how certain community or ecological factors (such as population characteristics or the built environment) influence the spatial patterns of crime. Crime mapping allows researchers and practitioners to explore crime patterns, offender mobility, and serial offenses over time and space. Within the context of local policing, crime mapping provides the visualization of crime clusters by types of crimes, thereby validating the street knowledge of patrol officers. Crime mapping can be used for allocating resources (patrol, specialized enforcement) and also to inform how the concerns of local citizens are being addressed. Mapping crime and its spatial distribution is of significant interest to a variety of stakeholders - it also serves as a relatable and understandable geographical phenomena for learning different types of spatial analysis techniques as well as many of the ‘nuances’ analysts face when using this type of ‘event’ data. As a result, within this practical, we are actually going to answer a very simple question: Does our perception of crime (and its distribution) in London vary at different scales? Here we are looking to test whether we would make the ‘ecological fallacy’ mistake of assuming patterns at the ward level are the same at the borough level by looking to directly account for the impact of the Modifiable Area Unit Problem within our results. To test this, we will use these two administrative geographies (borough and ward) to aggregate crime data for London in 2020. Here we will be looking specifically at a specific type of crime: theft from a person. 3.3.1 Finding our data sets As we saw last week, accessing data within the UK, and specifically for London, is relatively straight-forward - you simply need to know which data portal contains the data set you want! Crime data For our crime data, we will use data directly from the Police Data Portal, which you can find at https://data.police.uk/. This Data Portal allows you to access and generate tabular data for crime recorded in the U.K. across different the different Police Forces since 2017. In total, there are 45 territorial police forces (TPF) and 3 special police forces (SPF) of the United Kingdom. Each TPF covers a specific area in the UK (e.g. the “West Midlands Police Force”), whilst the SPFs are cross-jurisdiction and cover specific types of crime, such as the British Transport Police. Therefore, when we want to download data for a specific area, we need to know which Police Force covers the Area of Interest (AOI) for our investigation. When you look to download crime data for London, for example, there are two territorial police forces working within the city and its greater metropolitan area: The Metropolitan Police Force (The Met), which covers nearly the entire London area, including Greater London The City of London (CoL) Police, which covers the City of London. The Met has no jurisdiction in the CoL. You therefore need to decide if you want to include an analysis of crime in the City of London or not - we will in our current study. Population data We know that if we want to study a phenomena like crime (and aggregate it to an areal unit as we will do today!), we will need to normalise this by our population. Luckily, we already have our ward population sorted from last week, with our ward_population_2019.shp that should be currently sitting in your final data folder. In addition to our ward level data set, we also want to generate the same type of shapefile for our London boroughs, i.e. a borough_ward_population_2019.shp, utilising the same approach as last week, joining our population table data to our borough shape data.To do this, we need to know where to get both our required data sets from - luckily, you have already got a borough shape data in your raw/boundaries/2011 folder. Therefore, it is just a case of tracking down the same Mid-Year Estimates (MYE) for London boroughs as we did for the wards. 3.3.2 Downloading and processing As outlined above, to get going with our analysis, we need to download both the population data for our boroughs and the 2020 crime data for our two police forces in London. Let us tackle the population data first. Borough population Through a quick search, we can find our borough population table data pretty much in the same place as our ward data - however it is a separate spreadsheet to download. Navigate to the data here. Download the Mid-2019: April 2020 local authority district codes .xls file. Open the data set in your spreadsheet editing software. Navigate to the MYE2-Persons tab. Utilising your preferred approach, extract: Code, Name, Geography and All ages data for all London boroughs. You should have a total of 33 boroughs. Once you have your 33 boroughs separated from the rest of the data, copy the columns (Code, Name, Geography and All ages) and respective data for each borough into a new csv. Remember to format the field names as well as the number field for the population as we did last week. Save as a new csv in your working population folder: borough_population_2019.csv. Ward population As mentioned above, you should have a ward_population_2019.shp file within your final data folder. As we will be using this data set in our practical, we would like to make sure that we keep a version of this data in its current state, just in case we make a mistake whilst processing our data set. As a result, we should create a copy of this data set within our working folder, that we can use for this practical. So go ahead and copy and paste over the ward_population_2019 shapefile from your final data folder to your working data folder. Do not forget to copy over ALL the files that belong to the shapefile (e.g. .prj, .dbf, .shx). Crime data Normally, we would now head to the Police Data Portal and download our crime data. However, the manual processing that is required is too exhaustive to do manually - and far (far!) easier to do using programming. As such you can download a pre-filtered spreadsheet instead. Unzip the download and copy the csv into a new folder in your raw data folder called: crime. File download File Type Link Theft from persons in 2020 csv Download Note When mapping the data from the provided longitude and latitude coordinates, it is important to know that these locations represent the approximate location of a crime — not the exact place that it happened. This displacement occurs to preserve anonymity of the individuals involved. The process by how this displacement occurs is standardised. There is a list of anonymous map points to which the exact location of each crime is compared against this master list to find the nearest map point. The co-ordinates of the actual crime are then replaced with the co-ordinates of the map point. Each map point is specifically chosen to avoid associating that point with an exact household. Interestingly enough, the police also convert the data from their recorded BNG eastings and northings into WGS84 latitude and longitude. 3.3.3 Using QGIS to map our crime data 3.3.3.1 Setting up the project Start QGIS Click on Project -&gt; New. Save your project into your qgis folder as w3-crime-analysis. Remember to save your work throughout the practical. Before we get started with adding data, we will first set the Coordinate Reference System of our Project. Click on Project -&gt; Properties – CRS. In the Filter box, type British National Grid. Select OSGB 1936 / British National Grid - EPSG:27700 and click Apply. Click OK. Now we have our Project CRS set, we are ready to start loading and processing our data. 3.3.3.2 Adding layers Click on Layer -&gt; Add Layer -&gt; Add Vector Layer. With File select as your source type, click on the small three dots button and navigate to your ward_population_2019.shp in your working folder. Click on the .shp file of this data set and click Open. Then click Add. You may need to close the box after adding the layer. We now need to create our borough population shapefile - and to do so, we need to repeat exactly the same process as last week in terms of joining our table data to our shapefile. You should now be able to do this, so we will not provide you with detailed instructions. Remember, you need to: Load the respective borough data set as a Vector Layer found in your raw/boundaries/2011 data folder: London_Borough_Excluding_MHW.shp. Load the respective Population data set as a Delimited Text File Layer (Remember the settings, including no geometry! This one is found in your working folder) Join the two data sets together using the Join tool in the borough data set Properties box (remember which fields to use, which to add and to remove the prefix - look back at last week’s instructions if you get stuck). Export your joined data set into a new data set within your working folder: borough_population_2019.shp. Make sure this data set is loaded into your Layers / Added to the map. Remove the original borough and population data layers. Once this is done, we are ready to load and map our crime data. We will load this data using the Delimited Text File Layer option you would have used just now to load the borough population - but this time, we will be adding point coordinates to map our crime data as points. Click on Layer -&gt; Add Layer -&gt; Add Delimited Text File Layer. With File select as your source type, click on the small three dots button and navigate to your crime_theft_2020.csv in your raw/crime folder. Click on the .csv file of this data set and click Open. In Record and Fields Options tick Decimal separator is comma, First record has field names, Detect field types and Discard empty fields. In Geometry Definition, select Point coordinates and set the X field to Longitude and the Y field to Latitude. The Geometry CRS should be: EPSG:4326 - WGS84. Click Add. Note You may be wondering whether we are not using the incorrect CRS for our data. As you click Add, you should have gotten a a pop-up from QGIS asking about transformations - they are the mathematical algorithms that convert data from one CRS to another. And this is exactly what QGIS is trying to do. QGIS knows that the Project CRS is BNG but the Layer you are trying to add has a WGS84 CRS. QGIS is asking you what transformation it should use to project the Layer in the Project CRS! This is because one key strength (but also problem!) of QGIS is that it can project “on the fly” - what this means is that QGIS will automatically convert all Layers to the Project CRS once it knows which transformation you would like to use so that they will all be rendered in the correct position with respect to each other! But you must note that this transformation is only temporary in nature and as a result, it is not a full reprojection of our data. More details on this can be found in QGIS’ user manual section on working with projections. For now, let us use the on-the-fly projection and accept QGIS’ default value by clicking OK. This transformation should be built-in to your QGIS transformation library, whereas some of the more accurate options would need installation. You should now see your crime data set displayed on the map. Figure 3.1: Borough map with crime data. We can test the ‘temporary’ nature of the projection by looking at the CRS of the crime_theft_2020 layer: Right-click on the crime_theft_2020 layer then select Properties -&gt; Information and then look at the associated CRS. You should see that the CRS of the layer is still WGS84. We want to make sure our analysis is as accurate and efficient as possible, so it is best to reproject our data into the same CRS as our administrative datasets, i.e. British National Grid. This also means we will have the data set to use in other projects, just in case. Back in the main QGIS window, click on Vector -&gt; Data Management Tools -&gt; Reproject Layer. Fill in the parameters as follows: Input Layer: crime_theft_2020 Target CRS: Project CRS: EPSG: 27700 Reprojected: Click on the three buttons and Save to File to create a new data file. Save it in your working folder as crime_theft_2020_BNG.shp Click Run and then close the tool box. You should now see the new data layer added to your Layers. Note QGIS can at times be a little bit buggy so when it creates new data layers in your Layers box, it often automates the name, hence you might see your layer added as Reprojected. It does this with other management and analysis tools as well, so just something to be aware of! Before moving on, let us do some housekeeping. Remove the crime_theft_2020 original data set. Rename the Reprojected data set to crime_theft_2020. Now we have an organised Layers and project, we are ready to start our crime analysis! 3.3.3.3 Counting points-in-polygons The next step of our analysis is incredibly simple - as QGIS has an in-built tool for us to use. We will use the Count Points in Polygons in the Analysis toolset for Vector data to count how many crimes have occured in both our wards and our boroughs. We will then have our count statistic which we will need to normalise by our population data to create our crime rate final statistic. Let’s get going and first start with calculating the crime rate for the borough scale: Click on Vector -&gt; Analysis Tools -&gt; Count Points in Polygons. Within the toolbox, select the parameters as follows: Polygons: borough_population_2019 Points: crime_theft_2020 (Note how both our data layers state the same CRS!) No weight field or class field Count field names: crimecount Click on the three dot button and Save to file: working -&gt; borough_crime_2020.shp Click Run and Close the box. You should now see a Count layer added to your Layers box. Click the checkbox next to crime_theft_2020 to hide the crime points layer for now. Right-click on the borough_crime_2020 layer and open the Attribute Table. You should now see a crimecount column next to your pop2019 column. You can look through the column to see the different levels of crime in the each borough. You can also sort the column, from small to big, big to small, like you would do in a spreadsheet software. Whilst it is great that we have ve got our crimecount, as we know, what we actually need is a crime rate to account for the different sizes in population in the boroughs and to avoid a population heat map. To get our crime rate statistic, we are going to do our first bit of table manipulation in QGIS. With the Attribute Table of your Count layer still open, click on the pencil icon at the start of the row. This pencil actually turns on the Editing mode in QGIS. The editing mode allows you to edit both the Attribute Table values and the geometry of your data. E.g. you could actually move the various vertex of your boroughs whilst in this Editing mode if you like! When it comes to the Attribute Table, it means you can directly edit existing values in the table or create and add new fields to the table. Whilst you can actually do the latter outside of the Editing mode, this Editing mode means you can reverse any edits you make and they are not permanent just in case you make a mistake. Using the Editing mode is the correct approach to editing your table, however, it might not always be the approach you use when generating new fields and, as we all are sometimes, a little lazy. (This may be a simple case of “Do what I say, not what I do!”) Let us go ahead and add a new field to contain our Crime Rate. Whilst in the Editing mode, click on New Field button (or Ctrl+W/CMD+W) and fill in the Field Parameters as follows: Name: crime_rate Comment: leave blank Type: Decimal number Length: 10 Precision: 0 Click OK, You should now see a new field added to our Attribute Table. Note Understanding how to add new fields and their parameters rely on you understanding the different data types we covered last week - and thinking through what sort of data type your field needs to contain. In our case, we will store our data as a decimal to enable our final calculation to produce a decimal (an integer/integer is likely to produce a decimal) but we will set the precision to 0 to have zero places after our decimal place when the data is used. That is because ultimately, we want our crime rate represented as an integer because, realistically, you cannot have half a crime. Calculating a decimal however will allow us to round-up within our calculations. The empty field has NULL populated for each row - so we need to find a way to give our boroughs some crime rate data. To do this, we will calculate a simple Crime Rate using the Field Calculator tool provided by QGIS within the Attribute Table. We will create a crime rate that details the number of crimes per 10,000 people in the borough. In most cases, a crime rate per person will create a decimal result less than 1 which not only will not be stored correctly by our crime_rate field but, for many people, a decimal value is hard to interpret and understand. Whilst still in the editing mode, click on the Abacus button (Ctrl + I / Cmd + I), which is actually the Field Calculator. A new pop-up should load up. We can see there are various options we could click at the top - including Create a new field. So we could in fact create a new field directly from the field calculator which would help us combine these two steps in one and quicken our workflow! For now, in the Field Calculator pop-up: Check the Update existing field box. Use the drop-down to select the crime_ratefield. In the Expression editor, add the following expression: ( “crimecount” / “pop2019” ) * 10000 You can type this in manually or use the Fields and Values selector in the box in the middle to add the fields into the editor. Once done, click OK. You should then return to the Attribute Table and see our newly populated crime_rate field - at the moment, we can see the resulting calculations stored as decimals. Click on the Save button to save these edits - you will see the numbers turn to integers. Click again on the Pencil button to exit Editing mode. We now have a crime_rate column to map. Before moving to the next step, if you would like, go ahead and symbolise your boroughs by this crime_rate. Rename your borough crime rate layer to Borough Crime Rate. Great! We now have our borough crime rate data set ready for mapping and analysis - we just now need to repeat this process to have our ward data set. Repeat the above processes to create a crime_rate column within our ward dataset ready for mapping and analysis. Tips Remember, you can use the field calculator straight away to shorten the field creation process by selecting to create a new field whilst completing the field calculation (still using the same parameters though!). One additional small tip is that in the middle box in the Field Calculator, you can load Recent field calculations and double-click on your prior calculation to automate the creation of the crime_rate calculation! 3.3.3.4 Mapping our crime data Now you have both datasets ready, it is time to style the maps. Remember to use the Properties box to first symbolise your maps. Think through using the appropriate colour scheme - and perhaps have a look online for some examples, if you do not want to use the defaults. Once you are happy with their symbolisation, we will turn them into proper publishable maps using QGIS’s Print Layout. If you have ever used ArcMap, this is similar to switch the view of your map canvas to a print layout within the main window - but in QGIS’s case, it loads up a new window. From the main QGIS window, click on Project -&gt; New Print Layout. In the small box that first appears, call your new print layout: crime_map_borough_ward. A new window should appear. Initially, when opening the print layout provides you with a blank canvas that represents the paper surface when using the print option. On the left-hand side of the window, you will find buttons beside the canvas to add print layout items: the current QGIS map canvas, text labels, images, legends, scale bars, basic shapes, arrows, attribute tables and HTML frames. In this toolbar you also find buttons to navigate, zoom in on an area and pan the view on the layout a well as buttons to select any layout item and to move the contents of the map item. On the right-hand side of the window, you will find two set of panels. The upper one holds the panels Items and Undo History and the lower holds the panels Layout, Item properties and Atlas generation. For our practical today, we’re most interested in the bottom panel as Layout will control the overall look of our map, whilst Item properties will allow us to customise the elements, such as Title or Legend, that we may add to our map. In the bottom part of the window, you can find a status bar with mouse position, current page number, a combo box to set the zoom level, the number of selected items if applicable and, in the case of atlas generation, the number of features. In the upper part of the window, you can find menus and other toolbars. All print layout tools are available in menus and as icons in a toolbar. Working with maps in the Print Layout is simple but it can be a little fiddly and, to make more complicated maps, requires you to understand how to use certain aspects of Print Layout, such as locking items. To start with creating a map, you use the Add Map tool to draw a box in which a snapshot of the current active map you have displayed in your QGIS main window will be loaded. Click on the Add Map tool and draw a box in the first half of our map to load our current map. Note, you can move your map around and resize the box simply by clicking on it as you would in Word etc. Figure 3.2: Current active map in the Print Layout. As you can see, the map currently does not look that great - we could really do with zooming in, as we do not need all of the white space. With your map selected, head to the Items Properties panel and look for the Scale parameter. Here we can manually edit the scale of our map to find the right zoom level. Have a go at entering different values and see what level you think suits the size of your map. Keep a note of the scale, as we will need this for the second map we will add to our map layout - our borough map. Next, in the same panel, if you would like, you can add a frame to your map - this will draw a box (of your selected formatting) around the current map. In the same panel, note down the size of your map - we want to make sure the next map we add is of the same size. Note, if you need to move the position of the map within the box, look for the Move Item Content tool on the left-hand side toolbar. Once you are done, finally click on the Lock Layers and Lock Style for layers. By locking the Layers (and their symbology) in our map, it means we can change our data/map in our main QGIS window without changing the map in the Print Layout - as we will see in a minute when adding our borough crime rate map. If we do not lock our layers, our map would automatically update to whatever is next displayed in the main QGIS window. Now we have added our first map to our Map Layout, we want to add a Legend for this specific map. Click on the Add Legend tool and again, draw a box on your map in which your legend will appear. As you will see, your Legend auto-generates an entry for every layer in our Layers box in the main QGIS application: In Item Properties, uncheck auto-update - this stops QGIS automatically populating your legend and enables you to customise your legend. First, let us rename our Layer in the legend to: Ward Crime Rate (per 10,000 people). Next, we want to remove all other Layers, using the - button We can also customise the Legend further, including type, size and alignment of font - go ahead and style your legend as you would prefer. Move the Legend to an appropriate part of the layout near your ward crime rate map - resize if necessary. Now we are finished with the ward map, we want to make sure we do not change any aspect of its layout. To do so, we need to lock both the Map and Legend in the Items panel - this prevents us accidentally moving items in our layout. Note, this is different to locking your layers in the Items Properties as we did earlier. In the Items panel, click the Lock check box for both our map and legend. Once locked, we can now start to add our borough map. In the main QGIS window, uncheck your Ward Crime Rate layer and make sure your Borough Crime Rate layer is now visible. Return to the Print Layout window. Repeat the process above of adding a map to the window - this time, you should now see your borough map loaded in the box (and you should see no changes to your ward map). Place your borough map next to your ward map - use the snap grids to help. Set your borough map to the same zoom level as your ward map. Make sure your borough map is the same size as your ward map. Set your borough map to the same extent as your ward map (extra neatness!). Add a frame if you want. Lock your layer and its symbology in the Items Properties once ready and the lock your layer in the Items panel. We now just need to add a second legend for our borough map. If we had standardised our values across our two maps, then we would only need to use one legend. However, in this case, as there is a difference in the values, we need to have two legends. Repeat the process as above to add a Legend for our borough map. Remember to re-title the Legend to make it more legible/informative. Match the same formatting for a clean look. Once complete, lock these two items in the Items panel as well. Now we have our two maps ready, we can add our main map elements: Title Orientation Data Source We will not at this time add anything else - an inset map could be nice, but this requires additional data that we do not have at the moment. Any other map elements would also probably make our design look too busy. Using the tools on the left-hand tool bar: Add a scale bar: use the Item Properties to adjust the Style, number of segments, font, etc. Add a north arrow: draw a box to generate the arrow and then use the Item Properties to adjust.. Add a title at the top of the page, and subtitles above the individual maps. Finally add a box detailing our data sources, you can copy and paste the following: Contains National Statistics data © Crown copyright and database right [2015] (Open Government Licence). Contains Ordnance Survey data © Crown copyright and database right [2015]. Crime data obtained from data.police.uk (Open Government Licence). Once you have added these properties in, you should have something that looks a little like this: Figure 3.3: Crime rates in London boroughs and wards. Note that the numbers in the legend may differ from the numbers in your own legend. The only thing outstanding is to export our map to a file. Go to Layout -&gt; Export as Image and then save it in your maps folder as London_2020_Crime-Rate.png. 3.4 Assignment Looking at the maps you have created, how does your perception of crime (and its distribution) in London vary at different scales? At the moment, we have looked at the crime rate as an amount, therefore we use a sequential colour scheme that shows, predominantly, where the crime rate is the highest. As an alternative, we could use a diverging colour scheme that could show us where the crime rate is lower and/or higher than a critical mid-point, such as the average crime rate across the wards or borough. Create a map of crime in London, at both the borough and ward level, that shows for each administrative geography the percentage difference from the overall mean crime rate. Tips You will need to start by calculating the average crime rate for both data sets and subsequently calculate the difference from these values for each geography. All calculations can be done using the field calculator in QGIS, but will require some thinking about the right expression. 3.5 Before you leave That is us all done. Remember to save your project and export your ward and borough shapefiles to your final folder! "],["programming-for-data-analysis.html", "4 Programming for Data Analysis 4.1 Lecture recording 4.2 Reading list 4.3 Programming 4.4 Programming in R 4.5 RStudio console 4.6 Simple analysis 4.7 Crime analysis I 4.8 Assignment 4.9 Before you leave", " 4 Programming for Data Analysis This week’s content introduces you to the foundational concepts associated with Programming for Data Analysis, where we have we have two areas of work to focus on: General principles of programming How to use R and RStudio effectively for programmatical data analysis 4.1 Lecture recording Lecture W4 4.2 Reading list Reading #1 Reading #2 4.3 Programming Programming is our most fundamental way of interacting with a computer - it was how computers were first built and operated - and for a long time, the Command Line Interface (CLI) was our primary way of using computers before our Graphical User Interface (GUI) Operating Systems (OS) and software became mainstream. Nowadays, the majority of us use our computers through clicking - and not typing. However, programming and computer code underpin every single application that we use on our computers… or really any technological device. After all, programming is used for so many purposes and applications, that, we as users take for granted - from software engineering and application development, to creating websites and managing databases at substantial scales. To help with this diversity of applications, multiple types of programming languages (and ways of using programming languages!) have developed - Wikipedia, for example, has a list of 50 different types of languages, although there is some overlap between many of these and some are used for incredibly niche activities. In general, the main programming languages that people focus on learning at the moment include: Figure 4.1: Top 10 programming languages and their applications according to DZone in 2017. 4.4 Programming in R Some can be used for a range of purposes – others are more specific, e.g. HTML for website building. We will be using R and RStudio in this module as the main tool to complete specific tasks we need to do for our data analysis. There are a lot of different tools out there that you can use to achieve the same outcomes (as you have seen with QGIS, and no doubt had experience of using some statistics/spreadsheet software) but we choose to use this tool because it provides us with many advantages over these other tools. What is important to understand is that R and RStudio are two different things: - R is our programming language, which we need to understand in terms of general principles, syntax and structure. - RStudio is our Integrated Development Environment (IDE), which we need to understand in terms of functionality and workflow. An IDE is simply a complicated way of saying “a place where I write and build scripts and execute my code”. As you may know already, R is a free and open-source programming language, that originally was created to focus on statistical analysis. In conjunction with the development of R as a language, the same community created the RStudio IDE to execute this statistical programming. Together, R and RStudio have grown into an incredibly success partnership of analytical programming language and analysis software - and is widely used for academic research as well as in the commercial sector. One of R’s great strength is that it is open-source, can be used on all major computer operating systems and is free for anyone to use. It, as a result, has a huge and active contributor community which constantly adds functionality to the language and software, making it an incredibly useful tool for many purposes and applications beyond statistical analysis. Unlike traditional statistical analysis programmes you may have used such as Microsoft Excel or even SPSS, within the R-Studio IDE, the user has to type commands to get it to execute tasks such as loading in a data set or performing a calculation. We primarily do this by building up a script, that provides a record of what you have done, whilst also enabling the straightforward repetition of tasks. We can also use the R Console to execute simple instructions that do not need repeating - such as installing libraries or quickly viewing data (we will get to this in a second). In addition, R, its various graphic-oriented “packages” and R-Studio are capable of making graphs, charts and maps through just a few lines of code (you might notice a Plots window to your right in your RStudio window) - which can then be easily modified and tweaked by making slight changes to the script if mistakes are spotted. Unfortunately, command-line computing can also be off-putting at first. It is easy to make mistakes that are not always obvious to detect and thus debug. Nevertheless, there are good reasons to stick with R and RStudio. These include: It is broadly intuitive with a strong focus on publishable-quality graphics. It is ‘intelligent’ and offers in-built good practice – it tends to stick to statistical conventions and present data in sensible ways. It is free, cross-platform, customisable and extendable with a whole swathe of packages/libraries (‘add ons’) including those for discrete choice, multilevel and longitudinal regression, and mapping, spatial statistics, spatial regression, and geostatistics. It is well respected and used at the world’s largest technology companies (including Google, Microsoft and Facebook, and at hundreds of other companies). It offers a transferable skill that shows to potential employers experience both of statistics and of computing. The intention of the practical elements of this week is to provide a thorough introduction to R-Studio to get you started: The basic programming principles behind R. Loading in data from csv files, filtering and subsetting it into smaller chunks and joining them together. Calculating a number of statistics for data exploration and checking. Creating basic and more complex plots in order to visualise the distributions values within a dataset. What you should remember is that R has a steep learning curve, but the benefits of using it are well worth the effort. The best way to really learn R is to take the basic code provided in tutorials and experiment with changing parameters - such as the colour of points in a graph - to really get ‘under the hood’ of the software. 4.4.1 The RStudio interface You should all have access to some form of R - whether this is on your personal computer, Desktop@UCL Anywhere or through RStudio Server - so let us go ahead and open RStudio and we will first take a quick tour of the various components of the R-Studio environment interface and how and when to use them. RStudio has various windows that you use for different purposes - and you can customise its layout dependent on your preference. When you first open R-Studio, it should look a little something like this: Figure 4.2: RStudio on RStudio Server. The main windows (panel/pane) to keep focused on for now are: Console: where we write “one-off” code, such as installing libraries/packages, as well as running quick views or plots of our data. Files: where our files are stored on our computer system - can help with checking file paths as well as file names, and general file management. Environment: where our variables are recorded - we can find out a lot about our variables by looking at the environment window, including data structure, data type(s) and the fields and ‘attributes’ of our variables. Plots: the outputs of our graphs, charts and maps are shown here. Help: where you an search for help, e.g. by typing in a function to find out its parameters. You may also have your Script Window open, which is where we build up and write code, to a) keep a record of our work, b) enable us to repeat and re-run code again, often with different parameters. We will not use this window until we get to the final practical instructions. We will see how we use these windows as we progress through this tutorial and understand in more detail what we mean by words such as ‘attributes’ (do not get confused here with the Attribute Table for QGIS) and data structures. 4.5 RStudio console We will first start off with using RStudio’s console to test out some of R’s in-built functionality by creating a few variables as well as a dummy data set that we will be able to analyse - and to get familiar with writing code. Note You might need to click on the console window to get it to expand - you can then drag it to take up a larger space in your RStudio window. In your R-Studio console, you should see a prompt sign - &gt; to the left - this means we are ready to start writing code. Anything that appears as red in the command line means it is an error (or a warning) so you will likely need to correct your code. If you see a &gt; on the left it means you can type in your next line, a + means that you have not finished the previous line of code. As will become clear, + signs often appear if you do not close brackets or you did not properly finish your command in a way that R expected. In your console, let us go ahead and conduct some quick maths - at their most basic, all programming languages can be used like calculators. 4.5.1 Command Input Type in 10 * 12 into the console. # conduct some maths 10 * 12 ## [1] 120 Once you press return, you should see the answer of 120 returned below. 4.5.2 Storing Variables Rather than use ‘raw’ or ‘standalone’ numbers and values, we primarily want to use variables that stores these values (or groups of them) under a memorable name for easy reference later. In R terminology this is called *creating an object and this object becomes stored as a variable**. The &lt;- symbol is used to assign the value to the variable name you have given. Let us create two variables for experimenting with. Type in ten &lt;- 10 into the console and execute. # store our ten variable ten &lt;- 10 You have just created your first variable. You will see nothing is returned in the console - but if you check your environment window, it has now appeared as a new variable that contains the associated value. Type in twelve &lt;- 12 into the console and execute. # store our twelve variable twelve &lt;- 12 Once again, you will see nothing returned to the console but do check your environment window for your variable. We have now stored two numbers into our environment - and given them variable names for easy reference. R stores these objects as variables in your computer’s RAM so they can be processed quickly. Without saving your environment (we will come onto this below), these variables would be lost if you close R (or it crashes). Now we have our variables, we can go ahead and execute the same simple multiplication: Type in ten * twelve into the console and execute. # conduct some maths again using our variables ten * twelve ## [1] 120 You should see the output in the console of 120. Whilst this maths may look trivial, it is, in fact, extremely powerful as it shows how these variables can be treated in the same way as the values they contain. Next, type in ten * twelve * 8 into the console and execute. # conduct some more maths with variables and raw values ten * twelve * 8 ## [1] 960 You should get an answer of 960. As you can see, we can mix variables with raw values without any problems. We can also store the output of variable calculations as a new variable. Type output &lt;- ten * twelve * 8 into the console and execute. # conduct some maths and store it as output output &lt;- ten * twelve * 8 As we are storing the output of our maths to a new variable, the answer is not returned to the screen. 4.5.3 Accessing and returning variables We can ask our computer to return this output by simply typing it into the console. You should see we get the same value as the earlier equation. # return the variable, output output ## [1] 960 4.5.4 Variables of different data types We can also store variables of different data types, not just numbers but text as well. Type in str_variable &lt;- \"This is our first string variable\" into the console and execute. # store a variable str_variable &lt;- &quot;This is our 1st string variable&quot; We have just stored our sentence made from a combination of characters, including letters and numbers. A variable that stores “words” (that may be sentences, or codes, or file names), is known as a string. A string is always denoted by the use of the quotation marks (\"\" or ''). Type in str_variable into the console and execute. # return our str_variable str_variable ## [1] &quot;This is our 1st string variable&quot; You should see our entire sentence returned - and enclosed in quotation marks (\"\"). Again, by simply entering our variable into the console, we have asked R to return our variable to us. 4.5.5 Calling functions on our variables We can also call a function on our variable. This use of call is a very specific programming term and generally what you use to say “use” a function. What it simply means is that we will use a specific function to do something to our variable. For example, we can also ask R to print our variable, which will give us the same output as accessing it directly via the console. Type in print(str_variable) into the console and execute. # print str_variable to the screen print(str_variable) ## [1] &quot;This is our 1st string variable&quot; We have just used our first function: print(). This function actively finds the variable and then returns this to our screen. You can type ?print into the console to find out more about the print() function. # gain access to the documentation for our print function ?print This can be used with any function to get access to their documentation which is essential to know how to use the function correctly and understand its output. In many cases, a function will take more than one argument or parameter, so it is important to know what you need to provide the function with in order for it to work. For now, we are using functions that only need one argument. 4.5.6 Returning functions When a function provides an output, such as this, it is known as returning. Not all functions will return an output to your screen - they will simply just do what you ask them to do, so often we require a print() statement or another type of returning function to check whether the function was successful or not. More on this later. 4.5.7 Examining our variables using functions Within the base R language, there are various functions that have been written to help us examine and find out information about our variables. For example, we can use the typeof() function to check what data type our variable is. Type in typeof(str_variable) into the console and execute. # call the typeof() function on str_variable to return the data type of our variable typeof(str_variable) ## [1] &quot;character&quot; You should see the answer: character. As evident, our str_variable is a character data type. We can try testing this out on one of our earlier variables too. Type in typeof(ten) into the console and execute. # call the typeof() function on ten variable to return the data type of our variable typeof(ten) ## [1] &quot;double&quot; You should see the answer: double. As evident, our ten is a double data type. For high-level objects that involve (more complicated) data structures, such as when we load a csv into R as a data frame, we are also able to check what class our object is, as follows: Type in class(str_variable) into the console and execute. # call the class() function on str_variable to return the object of our variable class(str_variable) ## [1] &quot;character&quot; In this case, you will get the same answer - character - because, in R, both its class and type are the same: a character. In other programming languages, you might have had string returned instead, but this effectively means the same thing. Type in class(ten) into the console and execute. # call the class() function on ten to return the object of our variable class(ten) ## [1] &quot;numeric&quot; In this case, you will get a different answer - numeric - because the class of this variable is numeric. This is because the class of numeric objects can contain either doubles (decimals) or integers (whole numbers). We can test this by asking whether our ten variable is an integer or not. Type in is.integer(ten) into the console and execute. # test our ten variable by asking if it is an integer is.integer(ten) ## [1] FALSE You should see we get the answer FALSE - as we know from our earlier typeof() function, our variable ten is stored as a double and therefore cannot be an integer. Whilst knowing this might not seem important now, but when it comes to our data analysis, the difference of a decimal number versus a whole number can quite easily add bugs into our code. We can incorporate these tests into our code when we need to evaluate an output of a process and do some quality assurance testing of our data analysis. We can also ask how long our variable is - in this case, we will find out how many different sets of characters (strings) are stored in our variable, str_variable. Type in length(str_variable) into the console and execute. # call the length() function on str_variable to return the length of our variable length(str_variable) ## [1] 1 You should get the answer 1 - as we only have one set of characters. We can also ask how long each set of characters is within our variable, i.e. ask how long the string contained by our variable is. Type in nchar(str_variable) into the console and execute. # call the nchar() function on str_variable to return the length of each of our elements within our variable nchar(str_variable) ## [1] 31 You should get an answer of 31. 4.5.8 Creating a two-element object Let us go ahead and test these two functions a little further by creating a new variable to store two string sets within our object, i.e. our variable will hold two elements. Type in two_str_variable &lt;- c(\"This is our second variable\", \"It has two parts to it\") into the console and execute. # store a new variable with two items using the c() function two_str_variable &lt;- c(&quot;This is our second string variable&quot;, &quot;It has two parts to it&quot;) In this piece of code, we have created a new variable using the c() function in R, that stands for combine values into a vector or list. We have provided that function with two sets of strings, using a comma to separate our two strings - all contained within the function’s brackets (()). You should now see a new variable in your environment window which tells us it is a) chr: characters, b) contains two items, and c) lists those items. Let us now try both our length() and nchar() on our new variable and see what the results are. # call the length() function and nchar() function on our new variable length(two_str_variable) ## [1] 2 nchar(two_str_variable) ## [1] 34 22 You should notice that the length() function now returned a 2 and the nchar() function returned two values of 34 and 22. There is one final function that we often want to use with our variables when we are first exploring them, which is attributes() - as our variables are very simple, they currently do not have any attributes (you are welcome to type in the code and try) but it is a really useful function, which we will come across later on. # call the attributes() function on our new variable attributes(two_str_variable) ## NULL Note In addition to make notes about the functions you are coming across in the workshop, you should notice that with each line of code in the examples, an additional comment is used to explain what the code does. Comments are denoted using the hash symbol #. This comments out that particular line so that R ignores it when the code is run. These comments will help you in future when you return to scripts a week or so after writing the code - as well as help others understand what is going on when sharing your code. It is good practice to get into writing comments as you code and not leave it to do retrospectively. Whilst we are using the console, using comments is not necessary - but as we start to build up a script later on, you will find them essential to help understand your workflow in the future. 4.6 Simple analysis The objects we created and played with above are very simple: we have stored either simple strings or numeric values - but the real power of R comes when we can begin to execute functions on more complex objects. R accepts four main types of data structures: vectors, matrices, data frames, and lists. So far, we have dabbled with a single item or a dual item vector - for the latter, we used the c() function to allow us to combine our two strings together within a single vector. We can use this same function to create and build more complex objects - which we can then use with some common statistical functions. We are going to try this out by using a simple set of dummy data: we are going to use the total number of pages and publication dates of the various editions of Geographic Information Systems and Science for a brief analysis: Book Edition Year Total Number of Pages 1st 2001 454 2nd 2005 517 3rd 2011 560 4th 2015 477 As we can see, we will ultimately want to store the data in a table as above (and we could easily copy this to a csv to load into R if we wanted). But we want to learn a little more about data structures in R, therefore, we are going to go ahead and build this table “manually”. 4.6.1 Housekeeping First, let us clear up our workspace and remove our current variables. Type rm(ten, twelve, output, str_variable, two_str_variable) into the console and execute. # clear our workspace rm(ten, twelve, output, str_variable, two_str_variable) You should now see we no longer have any variables in our window - we just used the rm() function to remove these variables from our environment and free up some RAM. Keeping a clear workspace is another recommendation of good practice moving forward. Of course, we do not want to get rid of any variables we might need to use later - but removing any variables we no longer need (such as test variables) will help you understand and manage your code and your working environment. 4.6.2 Atomic vectors The first complex data object we will create is a vector. A vector is the most common and basic data structure in R and is pretty much the workhorse of R. Vectors are a collection of elements that are mostly of either character, logical integer or numeric data types. Technically, vectors can be one of two types: Atomic vectors (all elements are of the same data type) Lists (elements can be of different data types) Although in practice the term “vector” most commonly refers to the atomic types and not to lists. The variables we created above are actually vectors - however they are made of only one or two elements. We want to make complex vectors with more elements to them. Let us create our first official “complex” vector, detailing the different total page numbers for GISS. Type giss_page_no &lt;- c(454, 517, 560, 477) into the console and execute. # store our total number of pages, in chronological order, as a variable giss_page_no &lt;- c(454, 517, 560, 477) Type print(giss_page_no) into the console and execute to check the results. # print our giss_page_no variable print(giss_page_no) ## [1] 454 517 560 477 We can see we have our total number of pages collected together in a single vector. We could if we want, execute some statistical functions on our vector object. # calculate the arithmetic mean on our variable mean(giss_page_no) ## [1] 502 # calculate the median on our variable median(giss_page_no) ## [1] 497 # calculate the range numbers of our variable range(giss_page_no) ## [1] 454 560 We have now completed our first set of descriptive statistics in R. We now know that the average number of pages the GISS book has contain is 497 pages - this is of course truly thrilling stuff, but hopefully an easy example to get on-board with. Let us see how we can build on our vector object by adding in a second vector object that details the relevant years of our book. Note that the total number of pages are entered in a specific order to correspond to these publishing dates (i.e. chronological), as outlined by the table above. As a result, we will need to enter the publication year in the same order. Type giss_year &lt;- c(2001, 2005, 2011, 2015) into the console and execute. # store our publication years, in chronological order, as a variable giss_year &lt;- c(2001, 2005, 2011, 2015) Type print(giss_year) into the console and execute. # print our giss_year variable print(giss_year) ## [1] 2001 2005 2011 2015 Of course, on their own, the two vectors do not mean much - but we can use the same c() function to combine the two together to create a matrix. 4.6.3 Matrices In R, a matrix is simply an extension of the numeric or character vectors. They are not a separate type of object per se but simply a vector that has two dimensions. That is they contain both rows and columns. As with atomic vectors, the elements of a matrix must be of the same data type. As both our page numbers and our years are numeric, we can add them together to create a matrix using the matrix() function. Type giss_year_nos &lt;- matrix(c(giss_year, giss_page_no), ncol=2) into the console and execute. # create a new matrix from our two vectors with two columns giss_year_nos &lt;- matrix(c(giss_year, giss_page_no), ncol=2) # note the inclusion of a new argument to our matrix: ncol=2 # this stands for &quot;number of columns&quot; and we want two. Type print(giss_year_nos) into the console and execute to check the result. print(giss_year_nos) ## [,1] [,2] ## [1,] 2001 454 ## [2,] 2005 517 ## [3,] 2011 560 ## [4,] 2015 477 The thing about matrices - as you might see above - is that, for us, they do not have a huge amount of use. If we were to look at this matrix in isolation from what we know it represents, we would not really know what to do with it. As a result, we tend to primarily use Data Frames in R as they offer the opportunity to add field names to our columns to help with their interpretation. Note The function we just used above, ‘matrix()’, was the first function that we used that took more than one argument. In this case, the arguments the matrix needed to run were: What data or data set should be stored in the matrix. How many columns (ncol=) do we need to store our data in. The function can actually accept several more arguments - but these were not of use for us in this scenario, so we did not include them. For almost any R package, the documentation will contain a list of the arguments that the function will takes, as well as in which format the functions expects these arguments and a set of usage examples. Understanding how to find out what object and data type a variable is essential therefore to knowing whether it can be used within a function - and whether we will need to transform our variable into a different data structure to be used for that specific function. For any function, there will be mandatory arguments (i.e. it will not run without these) or optional arguments (i.e. it will run without these, as the default to this argument has been set usually to FALSE, 0 or NULL). 4.6.4 Dataframes A data frame is an extremely important data type in R. It is pretty much the de-facto data structure for most tabular data and what we use for statistics. It also is the underlying structure to the table data (what we would call the attribute table in Q-GIS) that we associate with spatial data - more on this next week. A data frame is a special type of list where every element of the list will have the same length (i.e. data frame is a “rectangular” list), Essentially, a data frame is constructed from columns (which represent a list) and rows (which represents a corresponding element on each list). Each column will have the same amount of entries - even if, for that row, for example, the entry is simply NULL. Data frames can have additional attributes such as rownames(), which can be useful for annotating data, like subject_id or sample_id or even UID. In statistics, they are often not used - but in spatial analysis, these IDs can be very useful. Some additional information on data frames: They are usually created by read.csv() and read.table(), i.e. when importing the data into R. Assuming all columns in a data frame are of same type, a data frame can be converted to a matrix with data.matrix() (preferred) oras.matrix(). You can also create a new data frame with data.frame() function, e.g. a matrix can be converted to a data frame. You can find out the number of rows and columns with nrow() and ncol(), respectively. Rownames are often automatically generated and look like 1, 2, …, n. Consistency in numbering of rownames may not be honoured when rows are reshuffled or subset. Let us go ahead and create a new data frame from our matrix. Type giss_df &lt;- data.frame(giss_year_nos) into the console and execute. # create a new dataframe from our matrix giss_df &lt;- data.frame(giss_year_nos) We now have a data frame, we can use the View() function in R. Still in your console, type: View(giss_df) # view our data frame View(giss_df) You should now see a table pop-up as a new tab on your script window. It is now starting to look like our original table - but we are not exactly going to be happy with X1 and X2 as our field names - they are not very informative. 4.6.5 Column names We can rename our data frame column field names by using the names() function. Before we do this, have a read of what the names() function does. Still in your console, type: ?names # get the help documentation for the names function ?names As you can see, the function will get or set the names of an object, with renaming occuring by using the following syntax: names(x) &lt;- value The value itself needs to be a character vector of up to the same length as x, or NULL. We have two columns in our data frame, so we need to parse our names() function with a character vector with two elements. In the console, we shall enter two lines of code, one after another. First our character vector with our new names, new_names &lt;- c(\"year\", \"page_nos\"), and then the names() function containing this vector for renaming, names(giss_df) &lt;- new_names: # create a vector with our new column names new_names &lt;- c(&quot;year&quot;, &quot;page_nos&quot;) #rename our columns with our next names names(giss_df) &lt;- new_names You can go and check your data frame again and see the new names using either View() function or by clicking on the tab at the top. 4.6.6 Adding columns We are still missing one final column from our data frame - that is our edition of the textbook. As this is a character data type, we would not have been able to add this directly to our matrix - and instead have waited until we have our data frame to do so. This is because data frames can take different data types, unlike matrices - so let us go ahead and add the edition as a new column. To do so, we follow a similar process of creating a vector with our editions listed in chronological order, but then add this to our data frame by storing this vector as a new column in our data frame. We use the $ sign with our code that gives us “access” to the data frame’s column - we then specify the column edition, which whilst it does not exist at the moment, will be created from our code that assigns our edition variable to this column. Create a edition vector variable containing our textbook edition numbers - type and execute edition &lt;- c(\"1st\", \"2nd\", \"3rd\", \"4th\"). We then store this as a new column in our data frame under the column name edition by typing and executing giss_df$edition &lt;- edition: # create a vector with our editions edition &lt;- c(&quot;1st&quot;, &quot;2nd&quot;, &quot;3rd&quot;, &quot;4th&quot;) # add this vector as a new column to our data frame giss_df$edition &lt;- edition Again, you can go and check your data frame and see the new column using either View() function or by clicking on the tab at the top or by typing giss_df in your console window. # inspect giss_df ## year page_nos edition ## 1 2001 454 1st ## 2 2005 517 2nd ## 3 2011 560 3rd ## 4 2015 477 4th Now we have our data frame, let us find out a little about it. We can first return the dimensions (the size) of our data frame by using the dim() function. In your console, type dim(giss_df) and execute. # check our data frame dimensions dim(giss_df) ## [1] 4 3 We can see we have four rows and three columns. We can also finally use our attributes() function to get the attributes of our data frame. In your console, type attributes(giss_df) and execute: # check our data frame attributes attributes(giss_df) ## $names ## [1] &quot;year&quot; &quot;page_nos&quot; &quot;edition&quot; ## ## $row.names ## [1] 1 2 3 4 ## ## $class ## [1] &quot;data.frame&quot; Before we leave the console and move to a script, we will enter one last line of code for now to install an additoinal R library, called tidyverse. Type in install.packages(\"tidyverse\") into the console and execute. # install the tidyverse library install.packages(&quot;tidyverse&quot;) Note When working in R it is important to keep in mind that: R is case-sensitive so you need to make sure that you capitalise everything correctly if required. The spaces between the words do not matter but the positions of the commas and brackets do. Remember, if you find the prompt, &gt;, is replaced with a + it is because the command is incomplete. If necessary, hit the escape (esc) key and try again. It is important to come up with good names for your objects. In the case of the majority of our variables, we used a underscore _ to separate the words. It is good practice to keep the object names as short as possible but they still need to be easy to read and clear what they are referring to. Be aware: you cannot start an object name with a number! If you press the up arrow in the command line you will be able to edit the previous lines of code you have inputted. 4.7 Crime analysis I The last command you executed was the installation of a new R library: tidyverse. The tidyverse is a collection of packages that are specifically designed for data wrangling, management, cleaning, analysis and visualisation within RStudio. Whilst in many cases different packages work all slightly differently, all packages of the tidyverse share the underlying design philosophy, grammar, and data structures. The tidyverse itself is treated and loaded as a single package, but this means if you load the tidyverse package within your script (through library(tidyverse)), you will directly have access to all the functions that are part of each of the packages that are within the overall tidyverse. This means you do not have to load each package separately. For more information on tidyverse, have a look at https://www.tidyverse.org/. There are some specific functions in tidyverse suite of packages that will help us cleaning and preparing our data sets now and in the future - which is one of the main reasons of using this library. The most important and useful functions, from the tidyr and dplyr packages, are: Package Function Use to dplyr select select columns dplyr filter select rows dplyr mutate transform or recode variables dplyr summarise summarise data dplyr group by group data into subgropus for further processing tidyr pivot_longer convert data from wide format to long format tidyr pivot_wider convert long format data set to wide format These functions all complete very fundamental tasks that we need to manipulate and wrangle our data. Note The tidyr and dplyr packages with the tidyverse are just two examples of additional libraries created by the wider R community. The code you just ran asked R to fetch and install the tidyverse into your copy of R - so this means we will be able to use these libraries in our practical below simply by using the library(tidyverse) code at the top of our script. One thing we need to be aware of when it comes to using functions in these additional libraries, is that sometimes these functions are called the same thing as the base R package, or even, in some cases, another additional library. We therefore often need to specify which library we want to use this function from, and this can be done with a simple command (library::function) in our code. Whilst we have gone ahead and installed the tidyverse, each time we start a new script, we will need to load the tidyverse. 4.7.1 Starting a project In the previous section, R may have seemed fairly labour-intensive. We had to enter all our data manually and each line of code had to be written into the command line. Fortunately this is not routinely the case. In RStudio, we can use scripts to build up our code that we can run repeatedly - and save for future use. Before we start a new script, we first want to set up ourselves ready for the rest of our practicals by creating a new project. To put it succinctly, projects in RStudio keep all the files associated with a project together — input data, R scripts, analytical results, figures. This means we can easily keep track of - and access - inputs and outputs from different weeks across our module, whilst still creating standalone scripts for each bit of processing analysis we do. It also makes dealing with directories and paths a whole lot easier - particularly if you have followed the folder structure that was advised at the start of the module. Click on File -&gt; New Project -&gt; Existing Directory and browse to your GEOG0030 folder. Click on Create Project. Figure 4.3: Create a new project in an existing directory. You should now see your main window switch to this new project - and if you check your Files window, you should now see a new R Project called GEOG0030: Figure 4.4: A new R project. We are now “in” the GEOG0030 project - and any folders within the GEOG0030 project can be easily accessed by our code. Furthermore, any scripts we create will be saved in this project. Note, there is not a “script” folder per se, but rather your scripts will simply exist in this project. Note Please ensure that folder names and file names do not contain spaces or special characters such as * . \" / \\ [ ] : ; | = , &lt; ? &gt; &amp; $ # ! ' { } ( ). Different operating systems and programming languages deal differently with spaces and special characters and as such including these in your folder names and file names can cause many problems and unexpected errors. As an alternative to using white space you can use an underscore _ if you like. 4.7.2 Setting up a script For the majority of our analysis work, we will type our code within a script and not the console. Let us create our first script. Click on File -&gt; New File -&gt; R Script. This should give you a blank document that looks a bit like the command line. The difference is that anything you type here can be saved as a script and re-run at a later date. Figure 4.5: Creating a new script. Save your script as: wk4-csv-processing.r. Through our name, we know now that our script was created in Week 4 of Geocomputation and the code it will contain is something to do with csv processing. This will help us a lot in the future when we come to find code that we need for other projects. The first bit of code you will want to add to any script is to add a title. This title should give any reader a quick understanding of what your code achieves. When writing a script it is important to keep notes about what each step is doing. To do this, the hash (#) symbol is put before any code. This comments out that particular line so that R ignores it when the script is run. Let us go ahead and give our script a title - and maybe some additional information: # Combining Police Data csv&#39;s from 2020 into a single csv # Followed by analysis of data on monthly basis # Date: January 2021 # Author: Justin Now we have our title, the second bit of code we want to include in our script is to load our libraries (i.e. the installed packages we want to use in our script): # libraries library(tidyverse) By loading simply the tidyverse, we have a pretty good estimate that we will be able to access all the functions that we are going to need today. However, often when developing a script, you will realise that you will need to add libraries as you go along in order to use a specific function etc. When you do this, always add your library to the top of your script - if you ever share your script, it helps the person you are sharing with recognise quickly if they need to install any additional packages prior to trying to run the script. It also means your libraries do not get lost in the multiple lines of code you are writing. We are now ready to run these first two lines of code. Remember to save your script. 4.7.3 Running a script There are two main ways to run a script in RStudio - all at once or by line/chunk by line/chunk. It can be advantageous to pursue with the second option as you first start out to build your script as it allows you to test your code iteratively. To run line-by-line By clicking: Select the line or chunk of code you want to run, then click on Code and choose Run selected lines. By key commands: Select the line or chunk of code you want to run and then hold Ctl or Cmd and press Return. To run the whole script By clicking: Click on Run on the top-right of the scripting window and choose Run All. By key commands: Hold Option plus Ctl or Cmd and R. Stopping a script from running If you are running a script that seems to be stuck (for whatever reason) or you notice some of your code is wrong, you will need to interrupt R. To do so, click on Session -&gt; Interrupt R. If this does not work, you may end up needing to Terminate R but this may lose any unsaved progress. 4.7.4 Crime data Where last week we provided you with a crime data set, this week you will download and prepare the data set yourself. Start by navigating to data.police.uk. And click on Downloads. Under the data range select January 2020 to December 2020. Under the Custom download tab select Metropolitan Police Service and City of London Police. Leave all other settings and click on Generate file. Figure 4.6: Downloading our crime data. It may take a few minutes for the download to be generated, so be patient. Once the Download now button appears, you can download the 2020 crime data set. Once downloaded, unzip the file. You will notice that the zip file contains 12 individual folders - one for each month in 2020. Each folder contains two files - one containing the data for the Metropolitan Police Service and one for the City of London Police. Create a new folder named all_crime in your data/raw/crime directory and copy all 12 folders containing our data to this new folder. Figure 4.7: Your data folder should now look something like this. 4.7.4.1 Reading data into R We are now ready to get started with using the crime data csv's currently sat in our all_crime folder. To do so, we need to first figure out how to import the csv and understand the data structure it will be in after importing. To read in a csv into R requires the use of a very simple function from the tidyverse library: read_csv(). We can look at the help documentation to understand what we need to provide the function (or rather the optional arguments), but as we just want to load single csv, we will go ahead and just use the function with a simple parameter. # read in a single csv from our crime data crime_csv &lt;- read_csv(&quot;data/raw/crime/all_crime/2020-01/2020-01-metropolitan-street.csv&quot;) Note If using a Windows machine, you will need to submit your forward-slashes (/) with two backslashes (\\\\) whenever you are dealing with file paths! We can explore the csv we have just loaded as our new crime_csv variable and understand the class, attributes and dimensions of our variable. # check class and dimensions of our data frame class(crime_csv) ## [1] &quot;spec_tbl_df&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; dim(crime_csv) ## [1] 90979 12 We have found out our variable is a data frame, containing 90979 rows and 12 columns. We however do not want just the single csv and instead what to combine all our csv's in our all_crime folder into a single data frame - so how do we do this? This will be the most complicated section of code you will come across today, and we will use some functions that you have not seen before.. # read in all files and append all rows to a single data frame all_crime_df &lt;- list.files(path=&quot;data/raw/crime/all_crime/&quot;, full.names=TRUE, recursive=TRUE) %&gt;% lapply(read_csv) %&gt;% bind_rows This might take a little time to process (or might not), as we have a lot of data to get through. You should see a new data frame appear in your global environment called all_crime_df, for which we now have 1,187,847 observations! Note It is a little difficult to explain the code above without going into too much detail, but essential what the code does is: List all the files found in the data path: data/raw/crime/all_crime/ Read each of these as a csv by “applying” the read_csv() function on all files. Binding all rows of all individual data frames into a single data frame. These three different actions are combined by using something called a pipe (%&gt;%), which we will explain in more detail in later weeks. 4.7.4.2 Inspecting data in R We can now have a look at our large dataframe in more detail. # understand our all_crime_df cols, rows and print the first five rows ncol(all_crime_df) ## [1] 12 nrow(all_crime_df) ## [1] 1187847 head(all_crime_df) ## # A tibble: 6 × 12 ## `Crime ID` Month `Reported by` `Falls within` Longitude Latitude Location ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 37c663d86a53… 2020-… City of Lond… City of Londo… -0.106 51.5 On or ne… ## 2 5b89923fa5e0… 2020-… City of Lond… City of Londo… -0.118 51.5 On or ne… ## 3 07172682a8b2… 2020-… City of Lond… City of Londo… -0.112 51.5 On or ne… ## 4 14e02a6048af… 2020-… City of Lond… City of Londo… -0.111 51.5 On or ne… ## 5 fb3350ce8e04… 2020-… City of Lond… City of Londo… -0.113 51.5 On or ne… ## 6 &lt;NA&gt; 2020-… City of Lond… City of Londo… -0.0976 51.5 On or ne… ## # … with 5 more variables: LSOA code &lt;chr&gt;, LSOA name &lt;chr&gt;, Crime type &lt;chr&gt;, ## # Last outcome category &lt;chr&gt;, Context &lt;lgl&gt; You should now see with have the same number of columns as our previous single csv, but with much more rows. You can also see that the head() function provides us with the first five rows of our data frame. You can conversely use tail() to provide the last five rows. For now in our analysis, we only want to extract the theft crime in our data frame - so we will want to filter our data based on the Crime type column. However, as we can see, we have a space in our field name for Crime type and, in fact, many of the other fields. As we want to avoid having spaces in our field names when coding (or else our code will break!), we need to rename our fields. To do so, we will first get all of the names of our fields so we can copy and paste these over into our code: # get the field names of our all_crime_df names(all_crime_df) ## [1] &quot;Crime ID&quot; &quot;Month&quot; &quot;Reported by&quot; ## [4] &quot;Falls within&quot; &quot;Longitude&quot; &quot;Latitude&quot; ## [7] &quot;Location&quot; &quot;LSOA code&quot; &quot;LSOA name&quot; ## [10] &quot;Crime type&quot; &quot;Last outcome category&quot; &quot;Context&quot; We can then rename the field names in our data set - just as we did with our GISS table earlier: # create a new vector containing updated no space / no capital field names no_space_names &lt;- c(&quot;crime_id&quot;, &quot;month&quot;, &quot;reported_by&quot;, &quot;falls_within&quot;, &quot;longitude&quot;,&quot;latitude&quot;, &quot;location&quot;, &quot;lsoa_code&quot;, &quot;lsoa_name&quot;, &quot;crime_type&quot;, &quot;last_outcome_category&quot;, &quot;context&quot;) # rename our df field names using these new names names(all_crime_df) &lt;- no_space_names We now have our dataframe ready for filtering - and to do so, we’ll use the filter() function from the dplyr library (which is library within our tidyverse). This function is really easy to use - but there is also a filter() function in the R base library - that does something different to the function in dplyr. As a result, we need to use a specific type of syntax - library::function - to tell R to look for and use the the filter function from the dplyr library rather than the default base library. We then also need to populate our filter() function with the necessary parameters to extract only the “Theft from the person” crime type. This includes providing the function with our main data frame plus the filter query, as outliend below: # filter all_crime_df to contain only theft, store as a new variable: all_theft_df all_theft_df &lt;- dplyr::filter(all_crime_df, crime_type == &quot;Theft from the person&quot;) You should now see the new variable appear in your environment with 31,578 observations. We now want to do some further housekeeping and create on final data frame that will allow us to analyse crime in London by month. To do so, we want to count how many thefts occur each month in London - and luckily for us dplyr has another function that will do this for us, known simply as count(). Go ahead and search the help to understand the count() function - you will also see that there is only one function called count() so far, i.e. the one in the dplyr library, so we do not need to use the additional syntax we used above. Let us go ahead and count the number of thefts in London by month. The code for this is quite simple: # count in the all_theft_df the number of crimes by month and store as a new dataframe theft_month_df &lt;- count(all_theft_df,month) We have stored the output of our count() function to a new data frame: theft_month_df. Go ahead and look at the data frame to see the output - it is a very simple table containing simply the month and n, i.e. the number of thefts occurring per month. We can and should go ahead and rename this column to help with our interpretation of the data frame. We will use a quick approach to do this, that uses selection of the precise column to rename only the second column: # rename the second column of our new data frame to crime_totals names(theft_month_df)[2] &lt;- &quot;crime_totals&quot; This selection is made through the [2] element of code added after the names() function we have used earlier. We will look more at selection, slicing and indexing in next week’s practical. 4.8 Assignment We now have our final data set ready for our simple analysis and answer some simple questions. What is the mean average of crime per month in London in 2020? What is the median average crime per month in London in 2020? What are the minimum and maximum values of crime in London in 2020? Besides descriptive statistics, it would be really useful to generate a simple chart. Use the documentation of the barplot() function to create the barplot below: Do you notice anything interesting in the distribution of the theft from persons over time? As this barplot is still a little basic, also try to figure out how to change the bar chart fill and borders to another colour from grey and black respectively. Now, make sure to save your script, so we can return to it next week. You do not need to save your workspace - but can do so if you like. Saving the workspace will keep any variables generated during your current session saved and available in a future session. 4.9 Before you leave We have managed to take a data set of over 1 million records and clean and filter it to provide a chart that actually shows the potential impact of the COVID-19 lockdown on theft crime in London. Of course, there is a lot more research and exploratory data analysis we would need to complete before we could really substantiate our findings, but this first chart is certainly a step in the right direction. Next week, we will be doing a lot more with our data set - including a lot more data wrangling and of course spatial analysis, but hopefully this week has shown you want you can achieve with just a few lines of code. That concludes the tutorial for this week. "],["programming-for-spatial-analysis.html", "5 Programming for Spatial Analysis 5.1 Lecture recording 5.2 Reading list 5.3 Crime analysis II 5.4 Assignment 5.5 Before you leave", " 5 Programming for Spatial Analysis This week we are going to look at how to use R and RStudio as a piece of GIS software. Like last week, we will be completing an analysis of our theft crime data set in London. However, rather than solely looking at crime change over time, we are going to add in a spatial component to our analysis: how has crime changed across our wards over the year. 5.1 Lecture recording Lecture W4 5.2 Reading list Reading #1 Reading #2 5.3 Crime analysis II To analyse crime by ward over time, we will go through several steps of data preparation (‘data wrangling’) before joining our data to ward polygons. Specifically, we will: Take our all_theft_df dataframe and wrangle it to produce a dataframe with a ward per row with a crime count for each month in our fields. Join this dataframe to our ward_population_2019 shapefile (which should still be sitting in your working folder) and then produce a crime rate for each month, for each ward. Create a map for January 2020 using the tmap library. 5.3.1 Data preparation Before we get started, we first need to head back to our script from last week, run our script - and then write our all_theft_df to a csv file. If you had saved your environment from last week, keeping your variables in memory, theoretically you would not need to export the data frame as you should have access to this variable within your new script - but it would be good practice to write out the data and then load it back in. Open up RStudio (Server or Desktop), and make sure you open up your GEOG0030 project. Next open your script from last week - it should be saved as: wk4-csv-processing.r and should be visible in your files from your GEOG0030 project. Run your full script to and including the code that filters our large all_crime_df to only the all_theft_df. Scroll to the bottom of the script and enter the following code and execute: # write out the theft_crime_df to a csv within our raw crime data folder write.csv(all_theft_df,&quot;data/raw/crime/crime_theft_2020_london.csv&quot;, row.names = FALSE) Remember, if using a Windows machine, you will need to submit your forward-slashes (/) with two backslashes (\\\\) whenever you are dealing with file paths. You should now see a new csv within your raw crime data folder (data/raw/crime). Save your wk4-csv-processing.r script and then close the script. 5.3.2 Spatial analysis set up Open a new script within your GEOG0030 project and save this script as wk5-crime-spatial-processing.r. At the top of your script, add the following metadata (substitute accordingly): # Analysing crime in 2020 by month and ward # Date: January 2021 # Author: Justin Using the R console, install the following new libraries: # install libraries install.packages(c(&#39;sf&#39;,&#39;tmap&#39;,&#39;janitor&#39;)) Now let us add all of the libraries we will be using today to the top of our script: # libraries library(tidyverse) library(sf) library(tmap) You are already familiar with the tidyverse library, but now we adding sf to read and load our spatial data as well as tmap to visualise our spatial data. We are going to load both of the data sets we need today straight away: 1) the crime_theft_2020_london.csv we have just exported and 2) the ward_population_2019.shp we created in Week 3. First, let’s load our crime_theft_2020_london.csv into a dataframe called all_theft_df. # read in our crime_theft_2020_london csv from our raw crime data folder all_theft_df &lt;- read_csv(&quot;data/raw/crime/crime_theft_2020_london.csv&quot;) We can double-check what our csv looks like by either viewing our data or simply calling the head() function on our dataframe. Call the head() function on our data to check the first five rows: # check the first five rows of our all_theft dataframe head(all_theft_df) ## # A tibble: 6 × 12 ## crime_id month reported_by falls_within longitude latitude location lsoa_code ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 37c663d8… 2020… City of Lo… City of Lon… -0.106 51.5 On or n… E01000916 ## 2 dcfa16f9… 2020… City of Lo… City of Lon… -0.0941 51.5 On or n… E01000002 ## 3 be9310ed… 2020… City of Lo… City of Lon… -0.0945 51.5 On or n… E01000003 ## 4 0cbb0c51… 2020… City of Lo… City of Lon… -0.0945 51.5 On or n… E01000003 ## 5 aaafbcff… 2020… City of Lo… City of Lon… -0.0750 51.5 On or n… E01000005 ## 6 8249cc17… 2020… City of Lo… City of Lon… -0.0750 51.5 On or n… E01000005 ## # … with 4 more variables: lsoa_name &lt;chr&gt;, crime_type &lt;chr&gt;, ## # last_outcome_category &lt;chr&gt;, context &lt;lgl&gt; You should see these rows display in your console. Great, the data set looks as we remember, with the different fields, including, importantly for this week, the LSOA code which we will use to process and join our data together. Next, let’s add our ward_population_2019.shp. We will store this as a variable called ward_population and use the sf library to load the data: # read in our ward_population_2019 shp from our working data folder ward_population &lt;- st_read(&quot;data/working/ward_population_2019.shp&quot;, stringsAsFactors = FALSE) ## Reading layer `ward_population_2019&#39; from data source ## `/Users/justinvandijk/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0030/data/working/ward_population_2019.shp&#39; ## using driver `ESRI Shapefile&#39; ## Simple feature collection with 657 features and 7 fields ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid You should now see the ward_population variable appear in your environment window. 5.3.3 Interacting with spatial data As this is the first time we have loaded spatial data into R, let’s go for a little exploration of how we can interact with our spatial data frame. The first thing we want to do when we load spatial data is, of course, map it to see its ‘spatiality’ or rather how the data looks from a spatial perspective. To do this, we can use a really simple command from R’s base library: plot(). As we do not necessarily want to plot this data everytime we run this script in the future, we will type this command into the console as a “one-off”. In your console, plot our new spatial data: # plot our ward_population data plot(ward_population) You should see your ward_population plot appear in your Plots window - as you will see, your ward data set is plotted ‘thematically’ by each of the fields within the dat aset, including our pop2019 field we created last week. Note This plot() function is not to be used to make maps - but simply as a quick way of viewing our spatial data. We can also find out more information about our ward_population data. Let’s next check out our class of our data. Again, in the console type: # find out the class of our ward_population data class(ward_population) ## [1] &quot;sf&quot; &quot;data.frame&quot; We should see our data is an sf dataframe, which is great as it means we can utilise our tidyverse libraries with our ward_population. We can also use the attributes() function we looked at last week to find out a little more about the spatial part of our data frame. Again, in the console type: # find out the attributes of our ward_population data attributes(ward_population) ## $names ## [1] &quot;NAME&quot; &quot;GSS_CODE&quot; &quot;DISTRICT&quot; &quot;LAGSSCODE&quot; &quot;HECTARES&quot; ## [6] &quot;NONLD_AREA&quot; &quot;pop2019&quot; &quot;geometry&quot; ## ## $row.names ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ## [19] 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 ## [37] 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 ## [55] 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 ## [73] 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 ## [91] 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 ## [109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 ## [127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 ## [145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 ## [163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 ## [181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 ## [199] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 ## [217] 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 ## [235] 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 ## [253] 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 ## [271] 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 ## [289] 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 ## [307] 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 ## [325] 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 ## [343] 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 ## [361] 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 ## [379] 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 ## [397] 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 ## [415] 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 ## [433] 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 ## [451] 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 ## [469] 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 ## [487] 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 ## [505] 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 ## [523] 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 ## [541] 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 ## [559] 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 ## [577] 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 ## [595] 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 ## [613] 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 ## [631] 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 ## [649] 649 650 651 652 653 654 655 656 657 ## ## $class ## [1] &quot;sf&quot; &quot;data.frame&quot; ## ## $sf_column ## [1] &quot;geometry&quot; ## ## $agr ## NAME GSS_CODE DISTRICT LAGSSCODE HECTARES NONLD_AREA pop2019 ## &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## Levels: constant aggregate identity We can see how many rows we have, the names of our rows and a few more pieces of information about our ward_population data - for example, we can see that the specific $sf_column i.e. our spatial information) in our data set is called geometry. We can investigate this column a little more by selecting this column within our console to return. In the console type: # get info about the geometry of our ward_population data ward_population$geometry ## Geometry set for 657 features ## Geometry type: POLYGON ## Dimension: XY ## Bounding box: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## Projected CRS: OSGB 1936 / British National Grid ## First 5 geometries: You should see new information about our geometry column display in your console. From this selection we can find out the dataset’s: geometry type dimension bbox (bounding box) CRS (coordinate reference system) And also the first five geometries of our data set. This is really useful as one of the first things we want to know about our spatial data is what coordinate system it is projected with. As we should know, our ward_population data was created and exported within British National Grid, therefore seeing the EPSG code of British National Grid - 27700 - as our CRS confirms to us that R has read in our data set correctly. We could also actually find out this information using the st_crs() function from the sf library. # find out the CRS of our ward_population data st_crs(ward_population) ## Coordinate Reference System: ## User input: OSGB 1936 / British National Grid ## wkt: ## PROJCRS[&quot;OSGB 1936 / British National Grid&quot;, ## BASEGEOGCRS[&quot;OSGB 1936&quot;, ## DATUM[&quot;OSGB 1936&quot;, ## ELLIPSOID[&quot;Airy 1830&quot;,6377563.396,299.3249646, ## LENGTHUNIT[&quot;metre&quot;,1]]], ## PRIMEM[&quot;Greenwich&quot;,0, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433]], ## ID[&quot;EPSG&quot;,4277]], ## CONVERSION[&quot;British National Grid&quot;, ## METHOD[&quot;Transverse Mercator&quot;, ## ID[&quot;EPSG&quot;,9807]], ## PARAMETER[&quot;Latitude of natural origin&quot;,49, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8801]], ## PARAMETER[&quot;Longitude of natural origin&quot;,-2, ## ANGLEUNIT[&quot;degree&quot;,0.0174532925199433], ## ID[&quot;EPSG&quot;,8802]], ## PARAMETER[&quot;Scale factor at natural origin&quot;,0.9996012717, ## SCALEUNIT[&quot;unity&quot;,1], ## ID[&quot;EPSG&quot;,8805]], ## PARAMETER[&quot;False easting&quot;,400000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8806]], ## PARAMETER[&quot;False northing&quot;,-100000, ## LENGTHUNIT[&quot;metre&quot;,1], ## ID[&quot;EPSG&quot;,8807]]], ## CS[Cartesian,2], ## AXIS[&quot;(E)&quot;,east, ## ORDER[1], ## LENGTHUNIT[&quot;metre&quot;,1]], ## AXIS[&quot;(N)&quot;,north, ## ORDER[2], ## LENGTHUNIT[&quot;metre&quot;,1]], ## USAGE[ ## SCOPE[&quot;Engineering survey, topographic mapping.&quot;], ## AREA[&quot;United Kingdom (UK) - offshore to boundary of UKCS within 49°45&#39;N to 61°N and 9°W to 2°E; onshore Great Britain (England, Wales and Scotland). Isle of Man onshore.&quot;], ## BBOX[49.75,-9,61.01,2.01]], ## ID[&quot;EPSG&quot;,27700]] You notice that we actually get a lot more information about our CRS beyond simply the code using this function. This function is really important to us as users of spatial data as it allows us to retrieve and set the CRS of our spatial data (the latter is used in the case the data does not come with a .proj file but we do know what projection system should be used). The final thing we might want to do before we get started with our data analysis is to simply look at the data table part of our data set, i.e. what we called the Attribute Table in QGIS, but here it is simply the table part of our data frame. To do so, you can either use the View() function in the console or click on the ward_population variable within our environment. 5.3.4 Getting our crime data in shape Now we have our data loaded, our next step is to process our data to create what we need as our final output for analysis: a spatial dataframe that contains a theft crime rate for each ward for each month in 2020. However, if we look at our all_theft_df, we do not have a field that contains the wards our crimes have occured in. We only have two types of spatial or spatially-relevant data in our all_theft_df: The approximate WGS84 latitude and longitude. The Lower Super Output Area (LSOA) in which the crime it occurred. From Week 3’s practical, we know we can map our points using the coordinates and then provide a count by using a point-in-polygon (PIP) operation. However to do this for each month, we would need to filter our data set for each month and repeat the PIP operation - when we know a little more advanced code, this might end up being quite simple, but for now we will try to see if we can solve it differently. 5.3.4.1 Attribute join To get the number of crimes that occurred in each ward, all we need to do is figure our which Ward our LSOAs fall within and then we can add this as an additional attribute or rather column to our all_theft_df. From a GIScience perspective, there are many ways to do this - but the most straight forward is to use something called a look-up table. Look-up tables are an extremely common tool in database management and programming, providing a very simple approach to storing additional information about a feature (such as a row within a dataframe) in a separate table that can quite literally be “looked up” when needed for a specific application. In our case, we will actually join our look-up table to our current all_theft_df to get this information “hard-coded” to our dataframe for ease of use. To be able to do this, we therefore need to find a look-up table that contains a list of LSOAs in London and the wards in which they are contained. Lucky for us, after a quick search of the internet, we can find out that the Office for National Statistics provides this for us in their Open Geography Portal. They have a table that contains exactly what we’re looking for: Lower Layer Super Output Area (2011) to Ward (2018) Lookup in England and Wales v3. As the description on the website tells us, “This file is a best-fit lookup between 2011 lower layer super output areas, electoral wards/divisions and local authority districts in England and Wales as at 31 December 2018.” Download the look-up table from the ONS: Link Move this file in your data -&gt; raw -&gt; boundaries folder and rename to data/raw/boundaries/lsoa_ward_lookup.csv. Load the dataset using the read_csv() function. Do not worry if you have a few “parsing” failures, the table should still work fine. # read in our lsoa_ward_lookup csv from our raw boundaries data folder lsoa_ward_lookup &lt;- read_csv(&quot;data/raw/boundaries/lsoa_ward_lookup.csv&quot;) Now we have our lookup table, all we are going to do is extract the relevant ward name and code for each of the LSOAs in our all_theft_df. To do so, we’re going to use one of the join functions from the dplyr library. Note We have already learnt how to complete Attribute Joins in QGIS via the Joins tab in the Properties window - so it should come of no surprise that we can do exactly the same process within R. To conduct a join between two dataframes (spatial or non-spatial, it does not matter), we use the same principles of selecting a unique but matching field within our dataframes to join them together. Within R, you have two options to complete a data frame join: The first is to use the base R library and its merge() function: By default the data frames are merged on the columns with names they both have, but you can also provide the columns to match separate by using the parameters: by.x and by.y. Your code would look something like: merge(x, y, by.x = \"xColName\", by.y = \"yColName\"), with x and y each representing a dataframe. The rows in the two data frames that match on the specified columns are extracted, and joined together. If there is more than one match, all possible matches contribute one row each, but you can also tell merge whether you want all rows, including ones without a match, or just rows that match, with the arguments all.x and all. The second option is to use the dplyr library: dplyr uses SQL database syntax for its join functions. There are four types of joins possible with the dplyr library. inner_join(): includes all rows that exist both within x and y. left_join(): includes all rows in x. right_join(): includes all rows in y. full_join(): includes all rows in x and y. Figuring out which one you need will be on a case by case basis. Again, if the join columns have the same name, all you need is left_join(x, y). If they do not have the same name, you need a by argument, such as left_join(x, y, by = c(\"xName\" = \"yName\")). Left of the equals is the column for the first data frame, right of the equals is the name of the column for the second data frame. As we have seen from the list of fields above - and with our knowledge of our all_theft_df dataframe - we know that we have at least two fields that should match across the data sets: our lsoa codes and lsoa names. We of course need to identify the precise fields that contain these values in each of our data frames, i.e. LSOA11CD and LSOA11NM in our lsoa_ward_lookup dataframe and lsoa_code and lsoa_name in our all_theft_df dataframe, but once we know what fields we can use, we can go ahead and join our two data frames together. We are going to need to make multiple joins between our tables as we have multiple entries of crime for the same LSOA - as a result, we are going to need to use a function that allows us to keep all rows in our all_theft_df dataframe, but we do not need to keep all rows in our lsoa_ward_lookup if those wards are not within our data set. Let’s have a look in detail at how the four different types of joins from dplyr work: It looks like we’re going to need to use our left_join() function as we want to join matching rows from our lsoa_ward_lookup dataframe to our all_theft_df dataframe but make sure to keep all rows in the latter. Within your script, create a join between our two dataframes and store as a new variable: # join lsoa_ward_lookup rows to the all_theft_df on our two lsoa code fields all_theft_ward_df &lt;- left_join(all_theft_df, lsoa_ward_lookup, by = c(&quot;lsoa_code&quot; = &quot;LSOA11CD&quot;)) Let’s go ahead and check our join - we want to check that our LSOA codes and names match across our new dataframe. In your console, check the first five rows of our new data frame: # check our join via the first five rows head(all_theft_ward_df) ## # A tibble: 6 × 19 ## crime_id month reported_by falls_within longitude latitude location lsoa_code ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 37c663d8… 2020… City of Lo… City of Lon… -0.106 51.5 On or n… E01000916 ## 2 dcfa16f9… 2020… City of Lo… City of Lon… -0.0941 51.5 On or n… E01000002 ## 3 be9310ed… 2020… City of Lo… City of Lon… -0.0945 51.5 On or n… E01000003 ## 4 0cbb0c51… 2020… City of Lo… City of Lon… -0.0945 51.5 On or n… E01000003 ## 5 aaafbcff… 2020… City of Lo… City of Lon… -0.0750 51.5 On or n… E01000005 ## 6 8249cc17… 2020… City of Lo… City of Lon… -0.0750 51.5 On or n… E01000005 ## # … with 11 more variables: lsoa_name &lt;chr&gt;, crime_type &lt;chr&gt;, ## # last_outcome_category &lt;chr&gt;, context &lt;lgl&gt;, LSOA11NM &lt;chr&gt;, WD18CD &lt;chr&gt;, ## # WD18NM &lt;chr&gt;, WD18NMW &lt;chr&gt;, LAD18CD &lt;chr&gt;, LAD18NM &lt;chr&gt;, FID &lt;dbl&gt; You should now see that you have with 19 variables: 12 from all_theft_df, plus 7 from lsoa_ward_lookup. Now we have our joined data set, we can move forward with some more data wrangling. The thing is, our data frame is getting quite busy - we have duplicate fields and some fields we just won’t need. It would be good if we could trim down our dataframe to only the relevant data that we need moving forward, particularly, for example, if we wanted to go ahead and write out a hard copy of our theft data that now contains the associated ward. To be able to “trim” our data frame, we have two choices in terms of the code we might want to run. First, we could look to drop certain columns from our data frame. Alternatively, we could create a subset of the columns we want to keep from our data frame and store this as a new variable or simply overwrite the currently stored variable. To do either of these types of data transformation, we need to know more about how we can interact with a data frame in terms of **indexing*, selecting and slicing. 5.3.5 Data wrangling Everything we will be doing today as we progress with our data frame cleaning and processing relies on us understanding how to interact with and transform our data frame - this interaction itself relies on knowing about how indexing works in R as well as how to select and slice your data frame to extract the relevant cells, rows or columns and then manipulate them - as we’ll be doing in this practical. Whilst there are traditional programming approaches to this using the base R library, dplyr is making this type of data wrangling much easier. The following video provides an excellent explanation from both a base R perspective as well as using the dplyr library. It also includes a good explanation about what our pipe function , %&gt;% , does. As you can see from the video, there are two common approaches to selection and slicing in R, which rely on indexing and/or field names in different ways. 5.3.5.1 index and selection with base R The most basic approach to selecting and slicing within programming relies on the principle of using indexes within our data structures. Indexes actually apply to any type of data structure, from single atomic vectors to complicated data frames as we use here. Indexing is the numbering associated with each element of a data structure. For example, if we create a simple vector that stores three strings: # store a simple vector of three strings simple_vector &lt;- c(&quot;Aa&quot;, &quot;Bb&quot;, &quot;Cc&quot;, &quot;Dd&quot;, &quot;Ee&quot;, &quot;Ff&quot;, &quot;Gg&quot;) R will assign each element (i.e. string) within this simple vector with a number: Aa = 1, Bb = 2, Cc = 3 and so on. Now we can go ahead and select each element by using the base selection syntax which is using square brackets after your element’s variable name, as so: # select the first element of our variable ss simple_vector[1] ## [1] &quot;Aa&quot; Which should return the first element, our first string containing “Aa”. You could change the number in the square brackets to any number up to 7 and you would return each specific element in our vector. However, say you do not want the first element of our vector but the second to fifth elements. To achieve this, we conduct what is known in programming as a slicing operation, where, using the [] syntax, we add a colon : to tell R where to start and where to end in creating a selection, known as a slice: # select the second to fifth element of our vector, creating a &#39;slice&#39; of our vector simple_vector[2:5] ## [1] &quot;Bb&quot; &quot;Cc&quot; &quot;Dd&quot; &quot;Ee&quot; You should now see our 2nd to 5th elements returned. Now what is super cool about selection and slicing is that we can add in a simple - (minus) sign to essentially reverse our selection. So for example, we want to return everything but the 3rd element: # select everything but the third element of our vector simple_vector[-3] ## [1] &quot;Aa&quot; &quot;Bb&quot; &quot;Dd&quot; &quot;Ee&quot; &quot;Ff&quot; &quot;Gg&quot; And with a slice, we can use the minus to slice out parts of our vector, for example, remove the 2nd to the 5th elements (note the use of a minus sign for both): # select the second to fifth element of our vector, creating a &#39;slice&#39; of our vector simple_vector[-2:-5] ## [1] &quot;Aa&quot; &quot;Ff&quot; &quot;Gg&quot; This use of square brackets for selection syntax is common across many programming languages, including Python, but there are often some differences you’ll need to be aware of if you pursue other languages. For example: Python always starts its index from 0! Whereas we can see here with R, our index starts at 1. R is unable to index the characters within strings - this is something you can do in Python, but in R, we will need to use a function such as substring() - more on this another week. We can also apply these selection techniques to data frames, but we will have a little more functionality as our data frames are made from both rows and columns. This means when it comes to selections, we can utilise an amended selection syntax that follows a specific format to select individual rows, columns, slices of each, or just a single cell: [ rows, columns] There are many ways we can use this syntax, which we will show below using our lsoa_ward_lookup data frame. First, before looking through and executing these examples (in your console) familiarise yourself with the lsoa_ward_lookup data frame: # view lsoa_ward_lookup dataframe, execute this code in your console View(lsoa_ward_lookup) To select a single column from your data frame, you can use one of two approaches. First we can follow the syntax above carefully and simply set our column parameter in our syntax above to the number 2: # select the 2nd column from the data frame lsoa_ward_lookup[,2] You should see your second column display in your console. Second, we can actually select our column by only typing in the number (no need for the comma). By default, when there is only one argument present in the selection brackets, R will select the column from the data frame, not the row: # select the 2nd column from the data frame, Opt 2 lsoa_ward_lookup[2] To select a specific row, we need to add in a comma after our number - this will tell R to select the relevant row instead: # select the 2nd row from the data frame lsoa_ward_lookup[2,] You should see your second row appear. Now, to select a specific cell in our data frame, we simply provide both arguments in our selection parameters: # select the value at the 2nd row and 2nd column in the data frame lsoa_ward_lookup[2,2] What is also helpful in R is that we can select our columns by their field names by passing these field names to our selection brackets as a string. For a single column: # select the LSOA11NM column (2nd column) by name lsoa_ward_lookup[&quot;LSOA11NM&quot;] Or for more than one columns, we can supply a combined vector: # select the LSOA11CD (1st column) and LSOA11NM column (2nd column) by name lsoa_ward_lookup[c(&quot;LSOA11CD&quot;, &quot;LSOA11NM&quot;)] To retrieve our 2nd - 4th columns in our data frame, we can use: # select the 2nd to 4th columns from our data frame lsoa_ward_lookup[2:4] # select the 2nd to 4th columns from our data frame lsoa_ward_lookup[,2:4] We can also apply the negative # select everything but the 2nd to 4th columns from our data frame lsoa_ward_lookup[-2:-4] If you do not want a slide, we can also provide a combined list of the columns we want to extract: # select the 2nd, 3rd, 4th and 7th columns from our data frame lsoa_ward_lookup[c(2, 3, 4, 7)] We can apply this slicing approach to our rows: # select the 2nd to 4th rows from our data frame lsoa_ward_lookup[2:4,] As well as a negative selection: # select everything but the 2nd to 4th rows from our data frame lsoa_ward_lookup[-2:-4,] 5.3.5.2 index and selection with dplyr Instead of using the square brackets [] syntax, we now have functions that we can use to select or slice our data frames accordingly: For columns, we use the select() function that enables us to select a (or more) column(s) using their column names or a range of “helpers” such as ends_with() to select specific columns from our data frame. For rows, we use the slice() function that enables us to select a (or more) row(s) using their position (i.e. similar to the proess above) For both functions, we can also use the negative / - approach we saw in the base R approach to “reverse a selection”, e.g.: # select column 2 select(lsoa_ward_lookup, 2) # select everything but column 2 select(lsoa_ward_lookup, -2) #select LSOA11CD column, note no &quot;&quot; select(lsoa_ward_lookup, LSOA11CD) # select everything but column 2, note no &quot;&quot; select(lsoa_ward_lookup, -LSOA11CD) # select LSOA* columns select(lsoa_ward_lookup, starts_with(&quot;LSOA&quot;)) # select everything but column 2 select(lsoa_ward_lookup, -LSOA11CD) In addition to these index-based functions, within dplyr, we also have filter() that enables us to easily filter rows within our data frame based on specific conditions (such as being a City of London ward). In addition, dplyr provides lots of functions that we can use directly with these selections to apply certain data wrangling processes to only specific parts of our data frame, such as mutate() or count(). Note We will be using quite a few of these functions in the remaining data wrangling section below - plus throughout our module, so it is highly recommend to download the dplyr cheat sheet to keep track of what functions we are using and why! 5.4 Assignment 5.5 Before you leave "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
